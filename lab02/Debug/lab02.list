
lab02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080060f0  080060f0  000160f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006210  08006210  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08006210  08006210  00016210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006218  08006218  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006218  08006218  00016218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800621c  0800621c  0001621c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08006220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00004ad4  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b68  20004b68  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   000194db  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003261  00000000  00000000  0003959f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  0003c800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001328  00000000  00000000  0003dc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000390b  00000000  00000000  0003ef68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015f8b  00000000  00000000  00042873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cadbf  00000000  00000000  000587fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001235bd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058ac  00000000  00000000  00123610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060d8 	.word	0x080060d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	080060d8 	.word	0x080060d8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <HAL_UART_RxCpltCallback>:
}

uint8_t rx_data;
uint8_t tx_data[30]="Program's running...\r\n";

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART3){
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a08      	ldr	r2, [pc, #32]	; (8000504 <HAL_UART_RxCpltCallback+0x30>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d10a      	bne.n	80004fc <HAL_UART_RxCpltCallback+0x28>
        HAL_UART_Transmit(&huart3,&rx_data,sizeof(rx_data), 100);
 80004e6:	2364      	movs	r3, #100	; 0x64
 80004e8:	2201      	movs	r2, #1
 80004ea:	4907      	ldr	r1, [pc, #28]	; (8000508 <HAL_UART_RxCpltCallback+0x34>)
 80004ec:	4807      	ldr	r0, [pc, #28]	; (800050c <HAL_UART_RxCpltCallback+0x38>)
 80004ee:	f001 fe68 	bl	80021c2 <HAL_UART_Transmit>
        HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 80004f2:	2201      	movs	r2, #1
 80004f4:	4904      	ldr	r1, [pc, #16]	; (8000508 <HAL_UART_RxCpltCallback+0x34>)
 80004f6:	4805      	ldr	r0, [pc, #20]	; (800050c <HAL_UART_RxCpltCallback+0x38>)
 80004f8:	f001 ff97 	bl	800242a <HAL_UART_Receive_IT>
    }
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40004800 	.word	0x40004800
 8000508:	20000100 	.word	0x20000100
 800050c:	200000b0 	.word	0x200000b0

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fae6 	bl	8000ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f834 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f8c6 	bl	80006ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000520:	f000 f89a 	bl	8000658 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000524:	f002 ff5e 	bl	80033e4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Read_USART */
  Read_USARTHandle = osThreadNew(StartRead, NULL, &Read_USART_attributes);
 8000528:	4a0d      	ldr	r2, [pc, #52]	; (8000560 <main+0x50>)
 800052a:	2100      	movs	r1, #0
 800052c:	480d      	ldr	r0, [pc, #52]	; (8000564 <main+0x54>)
 800052e:	f002 ffa3 	bl	8003478 <osThreadNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <main+0x58>)
 8000536:	6013      	str	r3, [r2, #0]

  /* creation of Print_Str */
  Print_StrHandle = osThreadNew(StartPrint, NULL, &Print_Str_attributes);
 8000538:	4a0c      	ldr	r2, [pc, #48]	; (800056c <main+0x5c>)
 800053a:	2100      	movs	r1, #0
 800053c:	480c      	ldr	r0, [pc, #48]	; (8000570 <main+0x60>)
 800053e:	f002 ff9b 	bl	8003478 <osThreadNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a0b      	ldr	r2, [pc, #44]	; (8000574 <main+0x64>)
 8000546:	6013      	str	r3, [r2, #0]

  /* creation of LED_Control */
  LED_ControlHandle = osThreadNew(StartControl, NULL, &LED_Control_attributes);
 8000548:	4a0b      	ldr	r2, [pc, #44]	; (8000578 <main+0x68>)
 800054a:	2100      	movs	r1, #0
 800054c:	480b      	ldr	r0, [pc, #44]	; (800057c <main+0x6c>)
 800054e:	f002 ff93 	bl	8003478 <osThreadNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <main+0x70>)
 8000556:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000558:	f002 ff68 	bl	800342c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055c:	e7fe      	b.n	800055c <main+0x4c>
 800055e:	bf00      	nop
 8000560:	0800612c 	.word	0x0800612c
 8000564:	08000769 	.word	0x08000769
 8000568:	200000f4 	.word	0x200000f4
 800056c:	08006150 	.word	0x08006150
 8000570:	0800077d 	.word	0x0800077d
 8000574:	200000f8 	.word	0x200000f8
 8000578:	08006174 	.word	0x08006174
 800057c:	080007a5 	.word	0x080007a5
 8000580:	200000fc 	.word	0x200000fc

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	; 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f005 fcd6 	bl	8005f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	4b28      	ldr	r3, [pc, #160]	; (8000650 <SystemClock_Config+0xcc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	4a27      	ldr	r2, [pc, #156]	; (8000650 <SystemClock_Config+0xcc>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
 80005b8:	4b25      	ldr	r3, [pc, #148]	; (8000650 <SystemClock_Config+0xcc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <SystemClock_Config+0xd0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a21      	ldr	r2, [pc, #132]	; (8000654 <SystemClock_Config+0xd0>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <SystemClock_Config+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e0:	2302      	movs	r3, #2
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e4:	2301      	movs	r3, #1
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e8:	2310      	movs	r3, #16
 80005ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ec:	2302      	movs	r3, #2
 80005ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f0:	2300      	movs	r3, #0
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f4:	2308      	movs	r3, #8
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005f8:	23a8      	movs	r3, #168	; 0xa8
 80005fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000600:	2304      	movs	r3, #4
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 0320 	add.w	r3, r7, #32
 8000608:	4618      	mov	r0, r3
 800060a:	f000 fe15 	bl	8001238 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000614:	f000 f90a 	bl	800082c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2302      	movs	r3, #2
 800061e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000624:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000628:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2105      	movs	r1, #5
 8000636:	4618      	mov	r0, r3
 8000638:	f001 f876 	bl	8001728 <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000642:	f000 f8f3 	bl	800082c <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	; 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_USART3_UART_Init+0x4c>)
 800065e:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <MX_USART3_UART_Init+0x50>)
 8000660:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_USART3_UART_Init+0x4c>)
 8000664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000668:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_USART3_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_USART3_UART_Init+0x4c>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_USART3_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_USART3_UART_Init+0x4c>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_USART3_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_USART3_UART_Init+0x4c>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_USART3_UART_Init+0x4c>)
 8000690:	f001 fd4a 	bl	8002128 <HAL_UART_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800069a:	f000 f8c7 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200000b0 	.word	0x200000b0
 80006a8:	40004800 	.word	0x40004800

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	4b26      	ldr	r3, [pc, #152]	; (8000760 <MX_GPIO_Init+0xb4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a25      	ldr	r2, [pc, #148]	; (8000760 <MX_GPIO_Init+0xb4>)
 80006cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b23      	ldr	r3, [pc, #140]	; (8000760 <MX_GPIO_Init+0xb4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <MX_GPIO_Init+0xb4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a1e      	ldr	r2, [pc, #120]	; (8000760 <MX_GPIO_Init+0xb4>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <MX_GPIO_Init+0xb4>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <MX_GPIO_Init+0xb4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a17      	ldr	r2, [pc, #92]	; (8000760 <MX_GPIO_Init+0xb4>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MX_GPIO_Init+0xb4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_GPIO_Init+0xb4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a10      	ldr	r2, [pc, #64]	; (8000760 <MX_GPIO_Init+0xb4>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_GPIO_Init+0xb4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2103      	movs	r1, #3
 8000736:	480b      	ldr	r0, [pc, #44]	; (8000764 <MX_GPIO_Init+0xb8>)
 8000738:	f000 fd4a 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 800073c:	2303      	movs	r3, #3
 800073e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	2301      	movs	r3, #1
 8000742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	2300      	movs	r3, #0
 800074a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	4619      	mov	r1, r3
 8000752:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_GPIO_Init+0xb8>)
 8000754:	f000 fba0 	bl	8000e98 <HAL_GPIO_Init>

}
 8000758:	bf00      	nop
 800075a:	3728      	adds	r7, #40	; 0x28
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40020400 	.word	0x40020400

08000768 <StartRead>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartRead */
void StartRead(void *argument)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//HAL_UART_Receive_IT(&huart3, &rx_data, 1);
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 8000770:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000774:	f002 ff12 	bl	800359c <osDelay>
 8000778:	e7fa      	b.n	8000770 <StartRead+0x8>
	...

0800077c <StartPrint>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrint */
void StartPrint(void *argument)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPrint */
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Transmit(&huart3,tx_data, sizeof(tx_data), 1000);
 8000784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000788:	221e      	movs	r2, #30
 800078a:	4904      	ldr	r1, [pc, #16]	; (800079c <StartPrint+0x20>)
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <StartPrint+0x24>)
 800078e:	f001 fd18 	bl	80021c2 <HAL_UART_Transmit>
    osDelay(500);
 8000792:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000796:	f002 ff01 	bl	800359c <osDelay>
	HAL_UART_Transmit(&huart3,tx_data, sizeof(tx_data), 1000);
 800079a:	e7f3      	b.n	8000784 <StartPrint+0x8>
 800079c:	20000000 	.word	0x20000000
 80007a0:	200000b0 	.word	0x200000b0

080007a4 <StartControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControl */
void StartControl(void *argument)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControl */
  /* Infinite loop */
  for(;;)
  {
	  if (HAL_UART_Receive(&huart3, &rx_data, 2, 200) == HAL_OK){
 80007ac:	23c8      	movs	r3, #200	; 0xc8
 80007ae:	2202      	movs	r2, #2
 80007b0:	4912      	ldr	r1, [pc, #72]	; (80007fc <StartControl+0x58>)
 80007b2:	4813      	ldr	r0, [pc, #76]	; (8000800 <StartControl+0x5c>)
 80007b4:	f001 fd97 	bl	80022e6 <HAL_UART_Receive>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d119      	bne.n	80007f2 <StartControl+0x4e>
	  		switch(rx_data){
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <StartControl+0x58>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b30      	cmp	r3, #48	; 0x30
 80007c4:	d002      	beq.n	80007cc <StartControl+0x28>
 80007c6:	2b31      	cmp	r3, #49	; 0x31
 80007c8:	d005      	beq.n	80007d6 <StartControl+0x32>
 80007ca:	e009      	b.n	80007e0 <StartControl+0x3c>

	  		case '0':
	  			HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 80007cc:	2102      	movs	r1, #2
 80007ce:	480d      	ldr	r0, [pc, #52]	; (8000804 <StartControl+0x60>)
 80007d0:	f000 fd17 	bl	8001202 <HAL_GPIO_TogglePin>
	  		break;
 80007d4:	e004      	b.n	80007e0 <StartControl+0x3c>

	  		case '1':
	  			HAL_GPIO_TogglePin(GPIOB, LED0_Pin);
 80007d6:	2101      	movs	r1, #1
 80007d8:	480a      	ldr	r0, [pc, #40]	; (8000804 <StartControl+0x60>)
 80007da:	f000 fd12 	bl	8001202 <HAL_GPIO_TogglePin>
	  		break;
 80007de:	bf00      	nop

	  		}

	  	    HAL_Delay(500);
 80007e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007e4:	f000 f9c0 	bl	8000b68 <HAL_Delay>

	  		HAL_GPIO_WritePin(GPIOB, LED0_Pin | LED1_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2103      	movs	r1, #3
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <StartControl+0x60>)
 80007ee:	f000 fcef 	bl	80011d0 <HAL_GPIO_WritePin>
	  		}
    osDelay(1);
 80007f2:	2001      	movs	r0, #1
 80007f4:	f002 fed2 	bl	800359c <osDelay>
	  if (HAL_UART_Receive(&huart3, &rx_data, 2, 200) == HAL_OK){
 80007f8:	e7d8      	b.n	80007ac <StartControl+0x8>
 80007fa:	bf00      	nop
 80007fc:	20000100 	.word	0x20000100
 8000800:	200000b0 	.word	0x200000b0
 8000804:	40020400 	.word	0x40020400

08000808 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a04      	ldr	r2, [pc, #16]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d101      	bne.n	800081e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800081a:	f000 f985 	bl	8000b28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40010000 	.word	0x40010000

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	e7fe      	b.n	8000834 <Error_Handler+0x8>
	...

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <HAL_MspInit+0x54>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000846:	4a11      	ldr	r2, [pc, #68]	; (800088c <HAL_MspInit+0x54>)
 8000848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084c:	6453      	str	r3, [r2, #68]	; 0x44
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <HAL_MspInit+0x54>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <HAL_MspInit+0x54>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	4a0a      	ldr	r2, [pc, #40]	; (800088c <HAL_MspInit+0x54>)
 8000864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000868:	6413      	str	r3, [r2, #64]	; 0x40
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <HAL_MspInit+0x54>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	210f      	movs	r1, #15
 800087a:	f06f 0001 	mvn.w	r0, #1
 800087e:	f000 fa4f 	bl	8000d20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800

08000890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a1d      	ldr	r2, [pc, #116]	; (8000924 <HAL_UART_MspInit+0x94>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d134      	bne.n	800091c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <HAL_UART_MspInit+0x98>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	4a1b      	ldr	r2, [pc, #108]	; (8000928 <HAL_UART_MspInit+0x98>)
 80008bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <HAL_UART_MspInit+0x98>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <HAL_UART_MspInit+0x98>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a14      	ldr	r2, [pc, #80]	; (8000928 <HAL_UART_MspInit+0x98>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_UART_MspInit+0x98>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f8:	2303      	movs	r3, #3
 80008fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008fc:	2307      	movs	r3, #7
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	4809      	ldr	r0, [pc, #36]	; (800092c <HAL_UART_MspInit+0x9c>)
 8000908:	f000 fac6 	bl	8000e98 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2105      	movs	r1, #5
 8000910:	2027      	movs	r0, #39	; 0x27
 8000912:	f000 fa05 	bl	8000d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000916:	2027      	movs	r0, #39	; 0x27
 8000918:	f000 fa1e 	bl	8000d58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800091c:	bf00      	nop
 800091e:	3728      	adds	r7, #40	; 0x28
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40004800 	.word	0x40004800
 8000928:	40023800 	.word	0x40023800
 800092c:	40020800 	.word	0x40020800

08000930 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08c      	sub	sp, #48	; 0x30
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	4b2f      	ldr	r3, [pc, #188]	; (8000a04 <HAL_InitTick+0xd4>)
 8000946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000948:	4a2e      	ldr	r2, [pc, #184]	; (8000a04 <HAL_InitTick+0xd4>)
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	6453      	str	r3, [r2, #68]	; 0x44
 8000950:	4b2c      	ldr	r3, [pc, #176]	; (8000a04 <HAL_InitTick+0xd4>)
 8000952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800095c:	f107 020c 	add.w	r2, r7, #12
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	4611      	mov	r1, r2
 8000966:	4618      	mov	r0, r3
 8000968:	f001 f8fe 	bl	8001b68 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800096c:	f001 f8e8 	bl	8001b40 <HAL_RCC_GetPCLK2Freq>
 8000970:	4603      	mov	r3, r0
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000978:	4a23      	ldr	r2, [pc, #140]	; (8000a08 <HAL_InitTick+0xd8>)
 800097a:	fba2 2303 	umull	r2, r3, r2, r3
 800097e:	0c9b      	lsrs	r3, r3, #18
 8000980:	3b01      	subs	r3, #1
 8000982:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000984:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <HAL_InitTick+0xdc>)
 8000986:	4a22      	ldr	r2, [pc, #136]	; (8000a10 <HAL_InitTick+0xe0>)
 8000988:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800098a:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <HAL_InitTick+0xdc>)
 800098c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000990:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000992:	4a1e      	ldr	r2, [pc, #120]	; (8000a0c <HAL_InitTick+0xdc>)
 8000994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000996:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <HAL_InitTick+0xdc>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099e:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <HAL_InitTick+0xdc>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <HAL_InitTick+0xdc>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009aa:	4818      	ldr	r0, [pc, #96]	; (8000a0c <HAL_InitTick+0xdc>)
 80009ac:	f001 f90e 	bl	8001bcc <HAL_TIM_Base_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80009b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d11b      	bne.n	80009f6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009be:	4813      	ldr	r0, [pc, #76]	; (8000a0c <HAL_InitTick+0xdc>)
 80009c0:	f001 f95e 	bl	8001c80 <HAL_TIM_Base_Start_IT>
 80009c4:	4603      	mov	r3, r0
 80009c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80009ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d111      	bne.n	80009f6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009d2:	2019      	movs	r0, #25
 80009d4:	f000 f9c0 	bl	8000d58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b0f      	cmp	r3, #15
 80009dc:	d808      	bhi.n	80009f0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80009de:	2200      	movs	r2, #0
 80009e0:	6879      	ldr	r1, [r7, #4]
 80009e2:	2019      	movs	r0, #25
 80009e4:	f000 f99c 	bl	8000d20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e8:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <HAL_InitTick+0xe4>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]
 80009ee:	e002      	b.n	80009f6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
 80009f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3730      	adds	r7, #48	; 0x30
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	431bde83 	.word	0x431bde83
 8000a0c:	20000104 	.word	0x20000104
 8000a10:	40010000 	.word	0x40010000
 8000a14:	20000024 	.word	0x20000024

08000a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <NMI_Handler+0x4>

08000a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <HardFault_Handler+0x4>

08000a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <MemManage_Handler+0x4>

08000a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a4a:	f001 f989 	bl	8001d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000104 	.word	0x20000104

08000a58 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a5c:	4802      	ldr	r0, [pc, #8]	; (8000a68 <USART3_IRQHandler+0x10>)
 8000a5e:	f001 fd15 	bl	800248c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200000b0 	.word	0x200000b0

08000a6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <SystemInit+0x20>)
 8000a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a76:	4a05      	ldr	r2, [pc, #20]	; (8000a8c <SystemInit+0x20>)
 8000a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a94:	480d      	ldr	r0, [pc, #52]	; (8000acc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a96:	490e      	ldr	r1, [pc, #56]	; (8000ad0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a98:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a9c:	e002      	b.n	8000aa4 <LoopCopyDataInit>

08000a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa2:	3304      	adds	r3, #4

08000aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa8:	d3f9      	bcc.n	8000a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aac:	4c0b      	ldr	r4, [pc, #44]	; (8000adc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab0:	e001      	b.n	8000ab6 <LoopFillZerobss>

08000ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab4:	3204      	adds	r2, #4

08000ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab8:	d3fb      	bcc.n	8000ab2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aba:	f7ff ffd7 	bl	8000a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000abe:	f005 fa0d 	bl	8005edc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac2:	f7ff fd25 	bl	8000510 <main>
  bx  lr    
 8000ac6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ac8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000ad4:	08006220 	.word	0x08006220
  ldr r2, =_sbss
 8000ad8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000adc:	20004b68 	.word	0x20004b68

08000ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC_IRQHandler>
	...

08000ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <HAL_Init+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <HAL_Init+0x40>)
 8000aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af4:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <HAL_Init+0x40>)
 8000afa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <HAL_Init+0x40>)
 8000b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	f000 f8fc 	bl	8000d0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b12:	200f      	movs	r0, #15
 8000b14:	f7ff ff0c 	bl	8000930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b18:	f7ff fe8e 	bl	8000838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023c00 	.word	0x40023c00

08000b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_IncTick+0x20>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_IncTick+0x24>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <HAL_IncTick+0x24>)
 8000b3a:	6013      	str	r3, [r2, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000028 	.word	0x20000028
 8000b4c:	2000014c 	.word	0x2000014c

08000b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <HAL_GetTick+0x14>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	2000014c 	.word	0x2000014c

08000b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b70:	f7ff ffee 	bl	8000b50 <HAL_GetTick>
 8000b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b80:	d005      	beq.n	8000b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <HAL_Delay+0x44>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	461a      	mov	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b8e:	bf00      	nop
 8000b90:	f7ff ffde 	bl	8000b50 <HAL_GetTick>
 8000b94:	4602      	mov	r2, r0
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d8f7      	bhi.n	8000b90 <HAL_Delay+0x28>
  {
  }
}
 8000ba0:	bf00      	nop
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000028 	.word	0x20000028

08000bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	db0b      	blt.n	8000c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f003 021f 	and.w	r2, r3, #31
 8000c2c:	4907      	ldr	r1, [pc, #28]	; (8000c4c <__NVIC_EnableIRQ+0x38>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	095b      	lsrs	r3, r3, #5
 8000c34:	2001      	movs	r0, #1
 8000c36:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	; (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	; (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	; 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	; 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ff4c 	bl	8000bb0 <__NVIC_SetPriorityGrouping>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d32:	f7ff ff61 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	68b9      	ldr	r1, [r7, #8]
 8000d3c:	6978      	ldr	r0, [r7, #20]
 8000d3e:	f7ff ffb1 	bl	8000ca4 <NVIC_EncodePriority>
 8000d42:	4602      	mov	r2, r0
 8000d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff80 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d50:	bf00      	nop
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff54 	bl	8000c14 <__NVIC_EnableIRQ>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d80:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d82:	f7ff fee5 	bl	8000b50 <HAL_GetTick>
 8000d86:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d008      	beq.n	8000da6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2280      	movs	r2, #128	; 0x80
 8000d98:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e052      	b.n	8000e4c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f022 0216 	bic.w	r2, r2, #22
 8000db4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	695a      	ldr	r2, [r3, #20]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dc4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d103      	bne.n	8000dd6 <HAL_DMA_Abort+0x62>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d007      	beq.n	8000de6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f022 0208 	bic.w	r2, r2, #8
 8000de4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f022 0201 	bic.w	r2, r2, #1
 8000df4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000df6:	e013      	b.n	8000e20 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000df8:	f7ff feaa 	bl	8000b50 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b05      	cmp	r3, #5
 8000e04:	d90c      	bls.n	8000e20 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2220      	movs	r2, #32
 8000e0a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2203      	movs	r2, #3
 8000e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e015      	b.n	8000e4c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1e4      	bne.n	8000df8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e32:	223f      	movs	r2, #63	; 0x3f
 8000e34:	409a      	lsls	r2, r3
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d004      	beq.n	8000e72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2280      	movs	r2, #128	; 0x80
 8000e6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00c      	b.n	8000e8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2205      	movs	r2, #5
 8000e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f022 0201 	bic.w	r2, r2, #1
 8000e88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
 8000eb2:	e16b      	b.n	800118c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	f040 815a 	bne.w	8001186 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d005      	beq.n	8000eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d130      	bne.n	8000f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	091b      	lsrs	r3, r3, #4
 8000f36:	f003 0201 	and.w	r2, r3, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d017      	beq.n	8000f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d123      	bne.n	8000fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	220f      	movs	r2, #15
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	08da      	lsrs	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3208      	adds	r2, #8
 8000fd6:	69b9      	ldr	r1, [r7, #24]
 8000fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0203 	and.w	r2, r3, #3
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 80b4 	beq.w	8001186 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b60      	ldr	r3, [pc, #384]	; (80011a4 <HAL_GPIO_Init+0x30c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	4a5f      	ldr	r2, [pc, #380]	; (80011a4 <HAL_GPIO_Init+0x30c>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102c:	6453      	str	r3, [r2, #68]	; 0x44
 800102e:	4b5d      	ldr	r3, [pc, #372]	; (80011a4 <HAL_GPIO_Init+0x30c>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800103a:	4a5b      	ldr	r2, [pc, #364]	; (80011a8 <HAL_GPIO_Init+0x310>)
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	3302      	adds	r3, #2
 8001042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	220f      	movs	r2, #15
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a52      	ldr	r2, [pc, #328]	; (80011ac <HAL_GPIO_Init+0x314>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d02b      	beq.n	80010be <HAL_GPIO_Init+0x226>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a51      	ldr	r2, [pc, #324]	; (80011b0 <HAL_GPIO_Init+0x318>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d025      	beq.n	80010ba <HAL_GPIO_Init+0x222>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a50      	ldr	r2, [pc, #320]	; (80011b4 <HAL_GPIO_Init+0x31c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d01f      	beq.n	80010b6 <HAL_GPIO_Init+0x21e>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a4f      	ldr	r2, [pc, #316]	; (80011b8 <HAL_GPIO_Init+0x320>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d019      	beq.n	80010b2 <HAL_GPIO_Init+0x21a>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a4e      	ldr	r2, [pc, #312]	; (80011bc <HAL_GPIO_Init+0x324>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d013      	beq.n	80010ae <HAL_GPIO_Init+0x216>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a4d      	ldr	r2, [pc, #308]	; (80011c0 <HAL_GPIO_Init+0x328>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d00d      	beq.n	80010aa <HAL_GPIO_Init+0x212>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a4c      	ldr	r2, [pc, #304]	; (80011c4 <HAL_GPIO_Init+0x32c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d007      	beq.n	80010a6 <HAL_GPIO_Init+0x20e>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4b      	ldr	r2, [pc, #300]	; (80011c8 <HAL_GPIO_Init+0x330>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d101      	bne.n	80010a2 <HAL_GPIO_Init+0x20a>
 800109e:	2307      	movs	r3, #7
 80010a0:	e00e      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010a2:	2308      	movs	r3, #8
 80010a4:	e00c      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010a6:	2306      	movs	r3, #6
 80010a8:	e00a      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010aa:	2305      	movs	r3, #5
 80010ac:	e008      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010ae:	2304      	movs	r3, #4
 80010b0:	e006      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010b2:	2303      	movs	r3, #3
 80010b4:	e004      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e002      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010be:	2300      	movs	r3, #0
 80010c0:	69fa      	ldr	r2, [r7, #28]
 80010c2:	f002 0203 	and.w	r2, r2, #3
 80010c6:	0092      	lsls	r2, r2, #2
 80010c8:	4093      	lsls	r3, r2
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d0:	4935      	ldr	r1, [pc, #212]	; (80011a8 <HAL_GPIO_Init+0x310>)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010de:	4b3b      	ldr	r3, [pc, #236]	; (80011cc <HAL_GPIO_Init+0x334>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001102:	4a32      	ldr	r2, [pc, #200]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001108:	4b30      	ldr	r3, [pc, #192]	; (80011cc <HAL_GPIO_Init+0x334>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800112c:	4a27      	ldr	r2, [pc, #156]	; (80011cc <HAL_GPIO_Init+0x334>)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001156:	4a1d      	ldr	r2, [pc, #116]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <HAL_GPIO_Init+0x334>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001180:	4a12      	ldr	r2, [pc, #72]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3301      	adds	r3, #1
 800118a:	61fb      	str	r3, [r7, #28]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	2b0f      	cmp	r3, #15
 8001190:	f67f ae90 	bls.w	8000eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40013800 	.word	0x40013800
 80011ac:	40020000 	.word	0x40020000
 80011b0:	40020400 	.word	0x40020400
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020c00 	.word	0x40020c00
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40021400 	.word	0x40021400
 80011c4:	40021800 	.word	0x40021800
 80011c8:	40021c00 	.word	0x40021c00
 80011cc:	40013c00 	.word	0x40013c00

080011d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]
 80011dc:	4613      	mov	r3, r2
 80011de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e0:	787b      	ldrb	r3, [r7, #1]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011ec:	e003      	b.n	80011f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	041a      	lsls	r2, r3, #16
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	619a      	str	r2, [r3, #24]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001202:	b480      	push	{r7}
 8001204:	b085      	sub	sp, #20
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	460b      	mov	r3, r1
 800120c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001214:	887a      	ldrh	r2, [r7, #2]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4013      	ands	r3, r2
 800121a:	041a      	lsls	r2, r3, #16
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	43d9      	mvns	r1, r3
 8001220:	887b      	ldrh	r3, [r7, #2]
 8001222:	400b      	ands	r3, r1
 8001224:	431a      	orrs	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	619a      	str	r2, [r3, #24]
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e267      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d075      	beq.n	8001342 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001256:	4b88      	ldr	r3, [pc, #544]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	2b04      	cmp	r3, #4
 8001260:	d00c      	beq.n	800127c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001262:	4b85      	ldr	r3, [pc, #532]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126a:	2b08      	cmp	r3, #8
 800126c:	d112      	bne.n	8001294 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126e:	4b82      	ldr	r3, [pc, #520]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800127a:	d10b      	bne.n	8001294 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127c:	4b7e      	ldr	r3, [pc, #504]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d05b      	beq.n	8001340 <HAL_RCC_OscConfig+0x108>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d157      	bne.n	8001340 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e242      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800129c:	d106      	bne.n	80012ac <HAL_RCC_OscConfig+0x74>
 800129e:	4b76      	ldr	r3, [pc, #472]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a75      	ldr	r2, [pc, #468]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e01d      	b.n	80012e8 <HAL_RCC_OscConfig+0xb0>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b4:	d10c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x98>
 80012b6:	4b70      	ldr	r3, [pc, #448]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a6f      	ldr	r2, [pc, #444]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	4b6d      	ldr	r3, [pc, #436]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6c      	ldr	r2, [pc, #432]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e00b      	b.n	80012e8 <HAL_RCC_OscConfig+0xb0>
 80012d0:	4b69      	ldr	r3, [pc, #420]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a68      	ldr	r2, [pc, #416]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b66      	ldr	r3, [pc, #408]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a65      	ldr	r2, [pc, #404]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d013      	beq.n	8001318 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fc2e 	bl	8000b50 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fc2a 	bl	8000b50 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	; 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e207      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	4b5b      	ldr	r3, [pc, #364]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0xc0>
 8001316:	e014      	b.n	8001342 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fc1a 	bl	8000b50 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fc16 	bl	8000b50 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e1f3      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	4b51      	ldr	r3, [pc, #324]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0xe8>
 800133e:	e000      	b.n	8001342 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d063      	beq.n	8001416 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800134e:	4b4a      	ldr	r3, [pc, #296]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00b      	beq.n	8001372 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800135a:	4b47      	ldr	r3, [pc, #284]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001362:	2b08      	cmp	r3, #8
 8001364:	d11c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001366:	4b44      	ldr	r3, [pc, #272]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d116      	bne.n	80013a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001372:	4b41      	ldr	r3, [pc, #260]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <HAL_RCC_OscConfig+0x152>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d001      	beq.n	800138a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e1c7      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138a:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4937      	ldr	r1, [pc, #220]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800139a:	4313      	orrs	r3, r2
 800139c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139e:	e03a      	b.n	8001416 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d020      	beq.n	80013ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a8:	4b34      	ldr	r3, [pc, #208]	; (800147c <HAL_RCC_OscConfig+0x244>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ae:	f7ff fbcf 	bl	8000b50 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b6:	f7ff fbcb 	bl	8000b50 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e1a8      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d4:	4b28      	ldr	r3, [pc, #160]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4925      	ldr	r1, [pc, #148]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]
 80013e8:	e015      	b.n	8001416 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ea:	4b24      	ldr	r3, [pc, #144]	; (800147c <HAL_RCC_OscConfig+0x244>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f0:	f7ff fbae 	bl	8000b50 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f8:	f7ff fbaa 	bl	8000b50 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e187      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d036      	beq.n	8001490 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d016      	beq.n	8001458 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_RCC_OscConfig+0x248>)
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001430:	f7ff fb8e 	bl	8000b50 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001438:	f7ff fb8a 	bl	8000b50 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e167      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800144c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x200>
 8001456:	e01b      	b.n	8001490 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_RCC_OscConfig+0x248>)
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145e:	f7ff fb77 	bl	8000b50 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001464:	e00e      	b.n	8001484 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001466:	f7ff fb73 	bl	8000b50 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d907      	bls.n	8001484 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e150      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
 8001478:	40023800 	.word	0x40023800
 800147c:	42470000 	.word	0x42470000
 8001480:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001484:	4b88      	ldr	r3, [pc, #544]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1ea      	bne.n	8001466 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 8097 	beq.w	80015cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a2:	4b81      	ldr	r3, [pc, #516]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10f      	bne.n	80014ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	4b7d      	ldr	r3, [pc, #500]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a7c      	ldr	r2, [pc, #496]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b7a      	ldr	r3, [pc, #488]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ca:	2301      	movs	r3, #1
 80014cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ce:	4b77      	ldr	r3, [pc, #476]	; (80016ac <HAL_RCC_OscConfig+0x474>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d118      	bne.n	800150c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014da:	4b74      	ldr	r3, [pc, #464]	; (80016ac <HAL_RCC_OscConfig+0x474>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a73      	ldr	r2, [pc, #460]	; (80016ac <HAL_RCC_OscConfig+0x474>)
 80014e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fb33 	bl	8000b50 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ee:	f7ff fb2f 	bl	8000b50 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e10c      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	4b6a      	ldr	r3, [pc, #424]	; (80016ac <HAL_RCC_OscConfig+0x474>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d106      	bne.n	8001522 <HAL_RCC_OscConfig+0x2ea>
 8001514:	4b64      	ldr	r3, [pc, #400]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001518:	4a63      	ldr	r2, [pc, #396]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6713      	str	r3, [r2, #112]	; 0x70
 8001520:	e01c      	b.n	800155c <HAL_RCC_OscConfig+0x324>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b05      	cmp	r3, #5
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0x30c>
 800152a:	4b5f      	ldr	r3, [pc, #380]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800152c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152e:	4a5e      	ldr	r2, [pc, #376]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	6713      	str	r3, [r2, #112]	; 0x70
 8001536:	4b5c      	ldr	r3, [pc, #368]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153a:	4a5b      	ldr	r2, [pc, #364]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6713      	str	r3, [r2, #112]	; 0x70
 8001542:	e00b      	b.n	800155c <HAL_RCC_OscConfig+0x324>
 8001544:	4b58      	ldr	r3, [pc, #352]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001548:	4a57      	ldr	r2, [pc, #348]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	6713      	str	r3, [r2, #112]	; 0x70
 8001550:	4b55      	ldr	r3, [pc, #340]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001554:	4a54      	ldr	r2, [pc, #336]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001556:	f023 0304 	bic.w	r3, r3, #4
 800155a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d015      	beq.n	8001590 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001564:	f7ff faf4 	bl	8000b50 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156a:	e00a      	b.n	8001582 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156c:	f7ff faf0 	bl	8000b50 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	; 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e0cb      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001582:	4b49      	ldr	r3, [pc, #292]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0ee      	beq.n	800156c <HAL_RCC_OscConfig+0x334>
 800158e:	e014      	b.n	80015ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001590:	f7ff fade 	bl	8000b50 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001596:	e00a      	b.n	80015ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001598:	f7ff fada 	bl	8000b50 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e0b5      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ae:	4b3e      	ldr	r3, [pc, #248]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1ee      	bne.n	8001598 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ba:	7dfb      	ldrb	r3, [r7, #23]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d105      	bne.n	80015cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c0:	4b39      	ldr	r3, [pc, #228]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	4a38      	ldr	r2, [pc, #224]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 80a1 	beq.w	8001718 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015d6:	4b34      	ldr	r3, [pc, #208]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d05c      	beq.n	800169c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d141      	bne.n	800166e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <HAL_RCC_OscConfig+0x478>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff faae 	bl	8000b50 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff faaa 	bl	8000b50 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e087      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160a:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69da      	ldr	r2, [r3, #28]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	019b      	lsls	r3, r3, #6
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162c:	085b      	lsrs	r3, r3, #1
 800162e:	3b01      	subs	r3, #1
 8001630:	041b      	lsls	r3, r3, #16
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001638:	061b      	lsls	r3, r3, #24
 800163a:	491b      	ldr	r1, [pc, #108]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_RCC_OscConfig+0x478>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff fa83 	bl	8000b50 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164e:	f7ff fa7f 	bl	8000b50 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e05c      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x416>
 800166c:	e054      	b.n	8001718 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <HAL_RCC_OscConfig+0x478>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fa6c 	bl	8000b50 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fa68 	bl	8000b50 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e045      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x444>
 800169a:	e03d      	b.n	8001718 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d107      	bne.n	80016b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e038      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40007000 	.word	0x40007000
 80016b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <HAL_RCC_OscConfig+0x4ec>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d028      	beq.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d121      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016da:	429a      	cmp	r2, r3
 80016dc:	d11a      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016e4:	4013      	ands	r3, r2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d111      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fa:	085b      	lsrs	r3, r3, #1
 80016fc:	3b01      	subs	r3, #1
 80016fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001700:	429a      	cmp	r2, r3
 8001702:	d107      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001710:	429a      	cmp	r2, r3
 8001712:	d001      	beq.n	8001718 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800

08001728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0cc      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800173c:	4b68      	ldr	r3, [pc, #416]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d90c      	bls.n	8001764 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174a:	4b65      	ldr	r3, [pc, #404]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001752:	4b63      	ldr	r3, [pc, #396]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d001      	beq.n	8001764 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0b8      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d020      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800177c:	4b59      	ldr	r3, [pc, #356]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4a58      	ldr	r2, [pc, #352]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001786:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001794:	4b53      	ldr	r3, [pc, #332]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a52      	ldr	r2, [pc, #328]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800179e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a0:	4b50      	ldr	r3, [pc, #320]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	494d      	ldr	r1, [pc, #308]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d044      	beq.n	8001848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d107      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	4b47      	ldr	r3, [pc, #284]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d119      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e07f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d003      	beq.n	80017e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e6:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d109      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e06f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f6:	4b3b      	ldr	r3, [pc, #236]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e067      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001806:	4b37      	ldr	r3, [pc, #220]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f023 0203 	bic.w	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4934      	ldr	r1, [pc, #208]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	4313      	orrs	r3, r2
 8001816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001818:	f7ff f99a 	bl	8000b50 <HAL_GetTick>
 800181c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	e00a      	b.n	8001836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001820:	f7ff f996 	bl	8000b50 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	; 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e04f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 020c 	and.w	r2, r3, #12
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	429a      	cmp	r2, r3
 8001846:	d1eb      	bne.n	8001820 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001848:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d20c      	bcs.n	8001870 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001856:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d001      	beq.n	8001870 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e032      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800187c:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4916      	ldr	r1, [pc, #88]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	4313      	orrs	r3, r2
 800188c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d009      	beq.n	80018ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	490e      	ldr	r1, [pc, #56]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ae:	f000 f821 	bl	80018f4 <HAL_RCC_GetSysClockFreq>
 80018b2:	4602      	mov	r2, r0
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	490a      	ldr	r1, [pc, #40]	; (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 80018c0:	5ccb      	ldrb	r3, [r1, r3]
 80018c2:	fa22 f303 	lsr.w	r3, r2, r3
 80018c6:	4a09      	ldr	r2, [pc, #36]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff f82e 	bl	8000930 <HAL_InitTick>

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023c00 	.word	0x40023c00
 80018e4:	40023800 	.word	0x40023800
 80018e8:	08006198 	.word	0x08006198
 80018ec:	20000020 	.word	0x20000020
 80018f0:	20000024 	.word	0x20000024

080018f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f8:	b094      	sub	sp, #80	; 0x50
 80018fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	647b      	str	r3, [r7, #68]	; 0x44
 8001900:	2300      	movs	r3, #0
 8001902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001904:	2300      	movs	r3, #0
 8001906:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800190c:	4b79      	ldr	r3, [pc, #484]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b08      	cmp	r3, #8
 8001916:	d00d      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x40>
 8001918:	2b08      	cmp	r3, #8
 800191a:	f200 80e1 	bhi.w	8001ae0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800191e:	2b00      	cmp	r3, #0
 8001920:	d002      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0x34>
 8001922:	2b04      	cmp	r3, #4
 8001924:	d003      	beq.n	800192e <HAL_RCC_GetSysClockFreq+0x3a>
 8001926:	e0db      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001928:	4b73      	ldr	r3, [pc, #460]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x204>)
 800192a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800192c:	e0db      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800192e:	4b73      	ldr	r3, [pc, #460]	; (8001afc <HAL_RCC_GetSysClockFreq+0x208>)
 8001930:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001932:	e0d8      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001934:	4b6f      	ldr	r3, [pc, #444]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800193c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800193e:	4b6d      	ldr	r3, [pc, #436]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d063      	beq.n	8001a12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800194a:	4b6a      	ldr	r3, [pc, #424]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	099b      	lsrs	r3, r3, #6
 8001950:	2200      	movs	r2, #0
 8001952:	63bb      	str	r3, [r7, #56]	; 0x38
 8001954:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800195c:	633b      	str	r3, [r7, #48]	; 0x30
 800195e:	2300      	movs	r3, #0
 8001960:	637b      	str	r3, [r7, #52]	; 0x34
 8001962:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001966:	4622      	mov	r2, r4
 8001968:	462b      	mov	r3, r5
 800196a:	f04f 0000 	mov.w	r0, #0
 800196e:	f04f 0100 	mov.w	r1, #0
 8001972:	0159      	lsls	r1, r3, #5
 8001974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001978:	0150      	lsls	r0, r2, #5
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4621      	mov	r1, r4
 8001980:	1a51      	subs	r1, r2, r1
 8001982:	6139      	str	r1, [r7, #16]
 8001984:	4629      	mov	r1, r5
 8001986:	eb63 0301 	sbc.w	r3, r3, r1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001998:	4659      	mov	r1, fp
 800199a:	018b      	lsls	r3, r1, #6
 800199c:	4651      	mov	r1, sl
 800199e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019a2:	4651      	mov	r1, sl
 80019a4:	018a      	lsls	r2, r1, #6
 80019a6:	4651      	mov	r1, sl
 80019a8:	ebb2 0801 	subs.w	r8, r2, r1
 80019ac:	4659      	mov	r1, fp
 80019ae:	eb63 0901 	sbc.w	r9, r3, r1
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019c6:	4690      	mov	r8, r2
 80019c8:	4699      	mov	r9, r3
 80019ca:	4623      	mov	r3, r4
 80019cc:	eb18 0303 	adds.w	r3, r8, r3
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	462b      	mov	r3, r5
 80019d4:	eb49 0303 	adc.w	r3, r9, r3
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019e6:	4629      	mov	r1, r5
 80019e8:	024b      	lsls	r3, r1, #9
 80019ea:	4621      	mov	r1, r4
 80019ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019f0:	4621      	mov	r1, r4
 80019f2:	024a      	lsls	r2, r1, #9
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019fa:	2200      	movs	r2, #0
 80019fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80019fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a04:	f7fe fbe4 	bl	80001d0 <__aeabi_uldivmod>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a10:	e058      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a12:	4b38      	ldr	r3, [pc, #224]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	099b      	lsrs	r3, r3, #6
 8001a18:	2200      	movs	r2, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a22:	623b      	str	r3, [r7, #32]
 8001a24:	2300      	movs	r3, #0
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
 8001a28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a2c:	4642      	mov	r2, r8
 8001a2e:	464b      	mov	r3, r9
 8001a30:	f04f 0000 	mov.w	r0, #0
 8001a34:	f04f 0100 	mov.w	r1, #0
 8001a38:	0159      	lsls	r1, r3, #5
 8001a3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a3e:	0150      	lsls	r0, r2, #5
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4641      	mov	r1, r8
 8001a46:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a4a:	4649      	mov	r1, r9
 8001a4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a64:	ebb2 040a 	subs.w	r4, r2, sl
 8001a68:	eb63 050b 	sbc.w	r5, r3, fp
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	00eb      	lsls	r3, r5, #3
 8001a76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a7a:	00e2      	lsls	r2, r4, #3
 8001a7c:	4614      	mov	r4, r2
 8001a7e:	461d      	mov	r5, r3
 8001a80:	4643      	mov	r3, r8
 8001a82:	18e3      	adds	r3, r4, r3
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	464b      	mov	r3, r9
 8001a88:	eb45 0303 	adc.w	r3, r5, r3
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	028b      	lsls	r3, r1, #10
 8001a9e:	4621      	mov	r1, r4
 8001aa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aa4:	4621      	mov	r1, r4
 8001aa6:	028a      	lsls	r2, r1, #10
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aae:	2200      	movs	r2, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
 8001ab2:	61fa      	str	r2, [r7, #28]
 8001ab4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ab8:	f7fe fb8a 	bl	80001d0 <__aeabi_uldivmod>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	0c1b      	lsrs	r3, r3, #16
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	3301      	adds	r3, #1
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ad4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001adc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ade:	e002      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ae2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3750      	adds	r7, #80	; 0x50
 8001aec:	46bd      	mov	sp, r7
 8001aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	00f42400 	.word	0x00f42400
 8001afc:	007a1200 	.word	0x007a1200

08001b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000020 	.word	0x20000020

08001b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b1c:	f7ff fff0 	bl	8001b00 <HAL_RCC_GetHCLKFreq>
 8001b20:	4602      	mov	r2, r0
 8001b22:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	0a9b      	lsrs	r3, r3, #10
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	4903      	ldr	r1, [pc, #12]	; (8001b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b2e:	5ccb      	ldrb	r3, [r1, r3]
 8001b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	080061a8 	.word	0x080061a8

08001b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b44:	f7ff ffdc 	bl	8001b00 <HAL_RCC_GetHCLKFreq>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	0b5b      	lsrs	r3, r3, #13
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	4903      	ldr	r1, [pc, #12]	; (8001b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b56:	5ccb      	ldrb	r3, [r1, r3]
 8001b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40023800 	.word	0x40023800
 8001b64:	080061a8 	.word	0x080061a8

08001b68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	220f      	movs	r2, #15
 8001b76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 0203 	and.w	r2, r3, #3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b84:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	08db      	lsrs	r3, r3, #3
 8001ba2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001baa:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <HAL_RCC_GetClockConfig+0x60>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0207 	and.w	r2, r3, #7
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	601a      	str	r2, [r3, #0]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40023c00 	.word	0x40023c00

08001bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e041      	b.n	8001c62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d106      	bne.n	8001bf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f839 	bl	8001c6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3304      	adds	r3, #4
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	f000 f9d8 	bl	8001fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d001      	beq.n	8001c98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e04e      	b.n	8001d36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a23      	ldr	r2, [pc, #140]	; (8001d44 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d022      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0x80>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc2:	d01d      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0x80>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a1f      	ldr	r2, [pc, #124]	; (8001d48 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d018      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0x80>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a1e      	ldr	r2, [pc, #120]	; (8001d4c <HAL_TIM_Base_Start_IT+0xcc>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d013      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0x80>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a1c      	ldr	r2, [pc, #112]	; (8001d50 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d00e      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0x80>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a1b      	ldr	r2, [pc, #108]	; (8001d54 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d009      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0x80>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a19      	ldr	r2, [pc, #100]	; (8001d58 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d004      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0x80>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a18      	ldr	r2, [pc, #96]	; (8001d5c <HAL_TIM_Base_Start_IT+0xdc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d111      	bne.n	8001d24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b06      	cmp	r3, #6
 8001d10:	d010      	beq.n	8001d34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f042 0201 	orr.w	r2, r2, #1
 8001d20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d22:	e007      	b.n	8001d34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0201 	orr.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40010000 	.word	0x40010000
 8001d48:	40000400 	.word	0x40000400
 8001d4c:	40000800 	.word	0x40000800
 8001d50:	40000c00 	.word	0x40000c00
 8001d54:	40010400 	.word	0x40010400
 8001d58:	40014000 	.word	0x40014000
 8001d5c:	40001800 	.word	0x40001800

08001d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d122      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d11b      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0202 	mvn.w	r2, #2
 8001d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f8ee 	bl	8001f84 <HAL_TIM_IC_CaptureCallback>
 8001da8:	e005      	b.n	8001db6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f8e0 	bl	8001f70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f8f1 	bl	8001f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d122      	bne.n	8001e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d11b      	bne.n	8001e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0204 	mvn.w	r2, #4
 8001de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2202      	movs	r2, #2
 8001de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f8c4 	bl	8001f84 <HAL_TIM_IC_CaptureCallback>
 8001dfc:	e005      	b.n	8001e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8b6 	bl	8001f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f8c7 	bl	8001f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d122      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d11b      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0208 	mvn.w	r2, #8
 8001e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2204      	movs	r2, #4
 8001e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f89a 	bl	8001f84 <HAL_TIM_IC_CaptureCallback>
 8001e50:	e005      	b.n	8001e5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f88c 	bl	8001f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f89d 	bl	8001f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	2b10      	cmp	r3, #16
 8001e70:	d122      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0310 	and.w	r3, r3, #16
 8001e7c:	2b10      	cmp	r3, #16
 8001e7e:	d11b      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0210 	mvn.w	r2, #16
 8001e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f870 	bl	8001f84 <HAL_TIM_IC_CaptureCallback>
 8001ea4:	e005      	b.n	8001eb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f862 	bl	8001f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f873 	bl	8001f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d10e      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d107      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0201 	mvn.w	r2, #1
 8001edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7fe fc92 	bl	8000808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eee:	2b80      	cmp	r3, #128	; 0x80
 8001ef0:	d10e      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efc:	2b80      	cmp	r3, #128	; 0x80
 8001efe:	d107      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f902 	bl	8002114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1a:	2b40      	cmp	r3, #64	; 0x40
 8001f1c:	d10e      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f28:	2b40      	cmp	r3, #64	; 0x40
 8001f2a:	d107      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f838 	bl	8001fac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f003 0320 	and.w	r3, r3, #32
 8001f46:	2b20      	cmp	r3, #32
 8001f48:	d10e      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0320 	and.w	r3, r3, #32
 8001f54:	2b20      	cmp	r3, #32
 8001f56:	d107      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0220 	mvn.w	r2, #32
 8001f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f8cc 	bl	8002100 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a40      	ldr	r2, [pc, #256]	; (80020d4 <TIM_Base_SetConfig+0x114>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d013      	beq.n	8002000 <TIM_Base_SetConfig+0x40>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fde:	d00f      	beq.n	8002000 <TIM_Base_SetConfig+0x40>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3d      	ldr	r2, [pc, #244]	; (80020d8 <TIM_Base_SetConfig+0x118>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d00b      	beq.n	8002000 <TIM_Base_SetConfig+0x40>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a3c      	ldr	r2, [pc, #240]	; (80020dc <TIM_Base_SetConfig+0x11c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d007      	beq.n	8002000 <TIM_Base_SetConfig+0x40>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a3b      	ldr	r2, [pc, #236]	; (80020e0 <TIM_Base_SetConfig+0x120>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d003      	beq.n	8002000 <TIM_Base_SetConfig+0x40>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a3a      	ldr	r2, [pc, #232]	; (80020e4 <TIM_Base_SetConfig+0x124>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d108      	bne.n	8002012 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a2f      	ldr	r2, [pc, #188]	; (80020d4 <TIM_Base_SetConfig+0x114>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d02b      	beq.n	8002072 <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002020:	d027      	beq.n	8002072 <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a2c      	ldr	r2, [pc, #176]	; (80020d8 <TIM_Base_SetConfig+0x118>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d023      	beq.n	8002072 <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a2b      	ldr	r2, [pc, #172]	; (80020dc <TIM_Base_SetConfig+0x11c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d01f      	beq.n	8002072 <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a2a      	ldr	r2, [pc, #168]	; (80020e0 <TIM_Base_SetConfig+0x120>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d01b      	beq.n	8002072 <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a29      	ldr	r2, [pc, #164]	; (80020e4 <TIM_Base_SetConfig+0x124>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d017      	beq.n	8002072 <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a28      	ldr	r2, [pc, #160]	; (80020e8 <TIM_Base_SetConfig+0x128>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d013      	beq.n	8002072 <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a27      	ldr	r2, [pc, #156]	; (80020ec <TIM_Base_SetConfig+0x12c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00f      	beq.n	8002072 <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a26      	ldr	r2, [pc, #152]	; (80020f0 <TIM_Base_SetConfig+0x130>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00b      	beq.n	8002072 <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a25      	ldr	r2, [pc, #148]	; (80020f4 <TIM_Base_SetConfig+0x134>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d007      	beq.n	8002072 <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a24      	ldr	r2, [pc, #144]	; (80020f8 <TIM_Base_SetConfig+0x138>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d003      	beq.n	8002072 <TIM_Base_SetConfig+0xb2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a23      	ldr	r2, [pc, #140]	; (80020fc <TIM_Base_SetConfig+0x13c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d108      	bne.n	8002084 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4313      	orrs	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	4313      	orrs	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <TIM_Base_SetConfig+0x114>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d003      	beq.n	80020b8 <TIM_Base_SetConfig+0xf8>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a0c      	ldr	r2, [pc, #48]	; (80020e4 <TIM_Base_SetConfig+0x124>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d103      	bne.n	80020c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	615a      	str	r2, [r3, #20]
}
 80020c6:	bf00      	nop
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40010000 	.word	0x40010000
 80020d8:	40000400 	.word	0x40000400
 80020dc:	40000800 	.word	0x40000800
 80020e0:	40000c00 	.word	0x40000c00
 80020e4:	40010400 	.word	0x40010400
 80020e8:	40014000 	.word	0x40014000
 80020ec:	40014400 	.word	0x40014400
 80020f0:	40014800 	.word	0x40014800
 80020f4:	40001800 	.word	0x40001800
 80020f8:	40001c00 	.word	0x40001c00
 80020fc:	40002000 	.word	0x40002000

08002100 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e03f      	b.n	80021ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d106      	bne.n	8002154 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7fe fb9e 	bl	8000890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2224      	movs	r2, #36	; 0x24
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800216a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 fe81 	bl	8002e74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002180:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695a      	ldr	r2, [r3, #20]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002190:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2220      	movs	r2, #32
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2220      	movs	r2, #32
 80021b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b08a      	sub	sp, #40	; 0x28
 80021c6:	af02      	add	r7, sp, #8
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	4613      	mov	r3, r2
 80021d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b20      	cmp	r3, #32
 80021e0:	d17c      	bne.n	80022dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <HAL_UART_Transmit+0x2c>
 80021e8:	88fb      	ldrh	r3, [r7, #6]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e075      	b.n	80022de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_UART_Transmit+0x3e>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e06e      	b.n	80022de <HAL_UART_Transmit+0x11c>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2221      	movs	r2, #33	; 0x21
 8002212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002216:	f7fe fc9b 	bl	8000b50 <HAL_GetTick>
 800221a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	88fa      	ldrh	r2, [r7, #6]
 8002220:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	88fa      	ldrh	r2, [r7, #6]
 8002226:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002230:	d108      	bne.n	8002244 <HAL_UART_Transmit+0x82>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d104      	bne.n	8002244 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	61bb      	str	r3, [r7, #24]
 8002242:	e003      	b.n	800224c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002248:	2300      	movs	r3, #0
 800224a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002254:	e02a      	b.n	80022ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2200      	movs	r2, #0
 800225e:	2180      	movs	r1, #128	; 0x80
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 fbc1 	bl	80029e8 <UART_WaitOnFlagUntilTimeout>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e036      	b.n	80022de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10b      	bne.n	800228e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002284:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	3302      	adds	r3, #2
 800228a:	61bb      	str	r3, [r7, #24]
 800228c:	e007      	b.n	800229e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	781a      	ldrb	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	3301      	adds	r3, #1
 800229c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1cf      	bne.n	8002256 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2200      	movs	r2, #0
 80022be:	2140      	movs	r1, #64	; 0x40
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f000 fb91 	bl	80029e8 <UART_WaitOnFlagUntilTimeout>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e006      	b.n	80022de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2220      	movs	r2, #32
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022d8:	2300      	movs	r3, #0
 80022da:	e000      	b.n	80022de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022dc:	2302      	movs	r3, #2
  }
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3720      	adds	r7, #32
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b08a      	sub	sp, #40	; 0x28
 80022ea:	af02      	add	r7, sp, #8
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	603b      	str	r3, [r7, #0]
 80022f2:	4613      	mov	r3, r2
 80022f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b20      	cmp	r3, #32
 8002304:	f040 808c 	bne.w	8002420 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <HAL_UART_Receive+0x2e>
 800230e:	88fb      	ldrh	r3, [r7, #6]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e084      	b.n	8002422 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_UART_Receive+0x40>
 8002322:	2302      	movs	r3, #2
 8002324:	e07d      	b.n	8002422 <HAL_UART_Receive+0x13c>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2222      	movs	r2, #34	; 0x22
 8002338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002342:	f7fe fc05 	bl	8000b50 <HAL_GetTick>
 8002346:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	88fa      	ldrh	r2, [r7, #6]
 800234c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	88fa      	ldrh	r2, [r7, #6]
 8002352:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800235c:	d108      	bne.n	8002370 <HAL_UART_Receive+0x8a>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d104      	bne.n	8002370 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	61bb      	str	r3, [r7, #24]
 800236e:	e003      	b.n	8002378 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002374:	2300      	movs	r3, #0
 8002376:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002380:	e043      	b.n	800240a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2200      	movs	r2, #0
 800238a:	2120      	movs	r1, #32
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 fb2b 	bl	80029e8 <UART_WaitOnFlagUntilTimeout>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e042      	b.n	8002422 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10c      	bne.n	80023bc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	3302      	adds	r3, #2
 80023b8:	61bb      	str	r3, [r7, #24]
 80023ba:	e01f      	b.n	80023fc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c4:	d007      	beq.n	80023d6 <HAL_UART_Receive+0xf0>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10a      	bne.n	80023e4 <HAL_UART_Receive+0xfe>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d106      	bne.n	80023e4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	701a      	strb	r2, [r3, #0]
 80023e2:	e008      	b.n	80023f6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3301      	adds	r3, #1
 80023fa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002400:	b29b      	uxth	r3, r3
 8002402:	3b01      	subs	r3, #1
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1b6      	bne.n	8002382 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2220      	movs	r2, #32
 8002418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800241c:	2300      	movs	r3, #0
 800241e:	e000      	b.n	8002422 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002420:	2302      	movs	r3, #2
  }
}
 8002422:	4618      	mov	r0, r3
 8002424:	3720      	adds	r7, #32
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b084      	sub	sp, #16
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	4613      	mov	r3, r2
 8002436:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b20      	cmp	r3, #32
 8002442:	d11d      	bne.n	8002480 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d002      	beq.n	8002450 <HAL_UART_Receive_IT+0x26>
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e016      	b.n	8002482 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_UART_Receive_IT+0x38>
 800245e:	2302      	movs	r3, #2
 8002460:	e00f      	b.n	8002482 <HAL_UART_Receive_IT+0x58>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002470:	88fb      	ldrh	r3, [r7, #6]
 8002472:	461a      	mov	r2, r3
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 fb24 	bl	8002ac4 <UART_Start_Receive_IT>
 800247c:	4603      	mov	r3, r0
 800247e:	e000      	b.n	8002482 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002480:	2302      	movs	r3, #2
  }
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b0ba      	sub	sp, #232	; 0xe8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80024ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10f      	bne.n	80024f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024d6:	f003 0320 	and.w	r3, r3, #32
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d009      	beq.n	80024f2 <HAL_UART_IRQHandler+0x66>
 80024de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fc07 	bl	8002cfe <UART_Receive_IT>
      return;
 80024f0:	e256      	b.n	80029a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80024f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 80de 	beq.w	80026b8 <HAL_UART_IRQHandler+0x22c>
 80024fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d106      	bne.n	8002516 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800250c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 80d1 	beq.w	80026b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <HAL_UART_IRQHandler+0xae>
 8002522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252a:	2b00      	cmp	r3, #0
 800252c:	d005      	beq.n	800253a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f043 0201 	orr.w	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800253a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00b      	beq.n	800255e <HAL_UART_IRQHandler+0xd2>
 8002546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d005      	beq.n	800255e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f043 0202 	orr.w	r2, r3, #2
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800255e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00b      	beq.n	8002582 <HAL_UART_IRQHandler+0xf6>
 800256a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d005      	beq.n	8002582 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f043 0204 	orr.w	r2, r3, #4
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d011      	beq.n	80025b2 <HAL_UART_IRQHandler+0x126>
 800258e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002592:	f003 0320 	and.w	r3, r3, #32
 8002596:	2b00      	cmp	r3, #0
 8002598:	d105      	bne.n	80025a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800259a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d005      	beq.n	80025b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f043 0208 	orr.w	r2, r3, #8
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 81ed 	beq.w	8002996 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_UART_IRQHandler+0x14e>
 80025c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025cc:	f003 0320 	and.w	r3, r3, #32
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d002      	beq.n	80025da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 fb92 	bl	8002cfe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e4:	2b40      	cmp	r3, #64	; 0x40
 80025e6:	bf0c      	ite	eq
 80025e8:	2301      	moveq	r3, #1
 80025ea:	2300      	movne	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d103      	bne.n	8002606 <HAL_UART_IRQHandler+0x17a>
 80025fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002602:	2b00      	cmp	r3, #0
 8002604:	d04f      	beq.n	80026a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 fa9a 	bl	8002b40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002616:	2b40      	cmp	r3, #64	; 0x40
 8002618:	d141      	bne.n	800269e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	3314      	adds	r3, #20
 8002620:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002624:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002628:	e853 3f00 	ldrex	r3, [r3]
 800262c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002630:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002638:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	3314      	adds	r3, #20
 8002642:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002646:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800264a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002652:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002656:	e841 2300 	strex	r3, r2, [r1]
 800265a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800265e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1d9      	bne.n	800261a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266a:	2b00      	cmp	r3, #0
 800266c:	d013      	beq.n	8002696 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002672:	4a7d      	ldr	r2, [pc, #500]	; (8002868 <HAL_UART_IRQHandler+0x3dc>)
 8002674:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fbea 	bl	8000e54 <HAL_DMA_Abort_IT>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d016      	beq.n	80026b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002690:	4610      	mov	r0, r2
 8002692:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002694:	e00e      	b.n	80026b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f990 	bl	80029bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800269c:	e00a      	b.n	80026b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f98c 	bl	80029bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a4:	e006      	b.n	80026b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f988 	bl	80029bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80026b2:	e170      	b.n	8002996 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026b4:	bf00      	nop
    return;
 80026b6:	e16e      	b.n	8002996 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	2b01      	cmp	r3, #1
 80026be:	f040 814a 	bne.w	8002956 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80026c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 8143 	beq.w	8002956 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80026d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 813c 	beq.w	8002956 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026de:	2300      	movs	r3, #0
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fe:	2b40      	cmp	r3, #64	; 0x40
 8002700:	f040 80b4 	bne.w	800286c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002710:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 8140 	beq.w	800299a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800271e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002722:	429a      	cmp	r2, r3
 8002724:	f080 8139 	bcs.w	800299a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800272e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800273a:	f000 8088 	beq.w	800284e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	330c      	adds	r3, #12
 8002744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002748:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800274c:	e853 3f00 	ldrex	r3, [r3]
 8002750:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002754:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800275c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	330c      	adds	r3, #12
 8002766:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800276a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800276e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002772:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002776:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800277a:	e841 2300 	strex	r3, r2, [r1]
 800277e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002782:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1d9      	bne.n	800273e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	3314      	adds	r3, #20
 8002790:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002794:	e853 3f00 	ldrex	r3, [r3]
 8002798:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800279a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	3314      	adds	r3, #20
 80027aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80027b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80027b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80027ba:	e841 2300 	strex	r3, r2, [r1]
 80027be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80027c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1e1      	bne.n	800278a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3314      	adds	r3, #20
 80027cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027d0:	e853 3f00 	ldrex	r3, [r3]
 80027d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80027d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	3314      	adds	r3, #20
 80027e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80027ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80027ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80027f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80027f2:	e841 2300 	strex	r3, r2, [r1]
 80027f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80027f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1e3      	bne.n	80027c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	330c      	adds	r3, #12
 8002812:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002816:	e853 3f00 	ldrex	r3, [r3]
 800281a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800281c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800281e:	f023 0310 	bic.w	r3, r3, #16
 8002822:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	330c      	adds	r3, #12
 800282c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002830:	65ba      	str	r2, [r7, #88]	; 0x58
 8002832:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002834:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002836:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002838:	e841 2300 	strex	r3, r2, [r1]
 800283c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800283e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1e3      	bne.n	800280c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002848:	4618      	mov	r0, r3
 800284a:	f7fe fa93 	bl	8000d74 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002856:	b29b      	uxth	r3, r3
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	b29b      	uxth	r3, r3
 800285c:	4619      	mov	r1, r3
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f8b6 	bl	80029d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002864:	e099      	b.n	800299a <HAL_UART_IRQHandler+0x50e>
 8002866:	bf00      	nop
 8002868:	08002c07 	.word	0x08002c07
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002874:	b29b      	uxth	r3, r3
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 808b 	beq.w	800299e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002888:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 8086 	beq.w	800299e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	330c      	adds	r3, #12
 8002898:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289c:	e853 3f00 	ldrex	r3, [r3]
 80028a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	330c      	adds	r3, #12
 80028b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80028b6:	647a      	str	r2, [r7, #68]	; 0x44
 80028b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028be:	e841 2300 	strex	r3, r2, [r1]
 80028c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80028c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1e3      	bne.n	8002892 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	3314      	adds	r3, #20
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	e853 3f00 	ldrex	r3, [r3]
 80028d8:	623b      	str	r3, [r7, #32]
   return(result);
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	f023 0301 	bic.w	r3, r3, #1
 80028e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	3314      	adds	r3, #20
 80028ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80028ee:	633a      	str	r2, [r7, #48]	; 0x30
 80028f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028f6:	e841 2300 	strex	r3, r2, [r1]
 80028fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80028fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1e3      	bne.n	80028ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2220      	movs	r2, #32
 8002906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	330c      	adds	r3, #12
 8002916:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	e853 3f00 	ldrex	r3, [r3]
 800291e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f023 0310 	bic.w	r3, r3, #16
 8002926:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	330c      	adds	r3, #12
 8002930:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002934:	61fa      	str	r2, [r7, #28]
 8002936:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002938:	69b9      	ldr	r1, [r7, #24]
 800293a:	69fa      	ldr	r2, [r7, #28]
 800293c:	e841 2300 	strex	r3, r2, [r1]
 8002940:	617b      	str	r3, [r7, #20]
   return(result);
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1e3      	bne.n	8002910 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002948:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800294c:	4619      	mov	r1, r3
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f83e 	bl	80029d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002954:	e023      	b.n	800299e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800295a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295e:	2b00      	cmp	r3, #0
 8002960:	d009      	beq.n	8002976 <HAL_UART_IRQHandler+0x4ea>
 8002962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f95d 	bl	8002c2e <UART_Transmit_IT>
    return;
 8002974:	e014      	b.n	80029a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800297a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00e      	beq.n	80029a0 <HAL_UART_IRQHandler+0x514>
 8002982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298a:	2b00      	cmp	r3, #0
 800298c:	d008      	beq.n	80029a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f99d 	bl	8002cce <UART_EndTransmit_IT>
    return;
 8002994:	e004      	b.n	80029a0 <HAL_UART_IRQHandler+0x514>
    return;
 8002996:	bf00      	nop
 8002998:	e002      	b.n	80029a0 <HAL_UART_IRQHandler+0x514>
      return;
 800299a:	bf00      	nop
 800299c:	e000      	b.n	80029a0 <HAL_UART_IRQHandler+0x514>
      return;
 800299e:	bf00      	nop
  }
}
 80029a0:	37e8      	adds	r7, #232	; 0xe8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop

080029a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b090      	sub	sp, #64	; 0x40
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	4613      	mov	r3, r2
 80029f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029f8:	e050      	b.n	8002a9c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a00:	d04c      	beq.n	8002a9c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d007      	beq.n	8002a18 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a08:	f7fe f8a2 	bl	8000b50 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d241      	bcs.n	8002a9c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	330c      	adds	r3, #12
 8002a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a22:	e853 3f00 	ldrex	r3, [r3]
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	330c      	adds	r3, #12
 8002a36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a38:	637a      	str	r2, [r7, #52]	; 0x34
 8002a3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a40:	e841 2300 	strex	r3, r2, [r1]
 8002a44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1e5      	bne.n	8002a18 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3314      	adds	r3, #20
 8002a52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	e853 3f00 	ldrex	r3, [r3]
 8002a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	3314      	adds	r3, #20
 8002a6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a6c:	623a      	str	r2, [r7, #32]
 8002a6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a70:	69f9      	ldr	r1, [r7, #28]
 8002a72:	6a3a      	ldr	r2, [r7, #32]
 8002a74:	e841 2300 	strex	r3, r2, [r1]
 8002a78:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1e5      	bne.n	8002a4c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e00f      	b.n	8002abc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	bf0c      	ite	eq
 8002aac:	2301      	moveq	r3, #1
 8002aae:	2300      	movne	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d09f      	beq.n	80029fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3740      	adds	r7, #64	; 0x40
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	88fa      	ldrh	r2, [r7, #6]
 8002adc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	88fa      	ldrh	r2, [r7, #6]
 8002ae2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2222      	movs	r2, #34	; 0x22
 8002aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d007      	beq.n	8002b12 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b10:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695a      	ldr	r2, [r3, #20]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0201 	orr.w	r2, r2, #1
 8002b20:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 0220 	orr.w	r2, r2, #32
 8002b30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b095      	sub	sp, #84	; 0x54
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	330c      	adds	r3, #12
 8002b4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b52:	e853 3f00 	ldrex	r3, [r3]
 8002b56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	330c      	adds	r3, #12
 8002b66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b68:	643a      	str	r2, [r7, #64]	; 0x40
 8002b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b70:	e841 2300 	strex	r3, r2, [r1]
 8002b74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1e5      	bne.n	8002b48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3314      	adds	r3, #20
 8002b82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	e853 3f00 	ldrex	r3, [r3]
 8002b8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f023 0301 	bic.w	r3, r3, #1
 8002b92:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	3314      	adds	r3, #20
 8002b9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ba4:	e841 2300 	strex	r3, r2, [r1]
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1e5      	bne.n	8002b7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d119      	bne.n	8002bec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	330c      	adds	r3, #12
 8002bbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	e853 3f00 	ldrex	r3, [r3]
 8002bc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f023 0310 	bic.w	r3, r3, #16
 8002bce:	647b      	str	r3, [r7, #68]	; 0x44
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	330c      	adds	r3, #12
 8002bd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bd8:	61ba      	str	r2, [r7, #24]
 8002bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bdc:	6979      	ldr	r1, [r7, #20]
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	e841 2300 	strex	r3, r2, [r1]
 8002be4:	613b      	str	r3, [r7, #16]
   return(result);
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1e5      	bne.n	8002bb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002bfa:	bf00      	nop
 8002bfc:	3754      	adds	r7, #84	; 0x54
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b084      	sub	sp, #16
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f7ff fecb 	bl	80029bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c26:	bf00      	nop
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b085      	sub	sp, #20
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b21      	cmp	r3, #33	; 0x21
 8002c40:	d13e      	bne.n	8002cc0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c4a:	d114      	bne.n	8002c76 <UART_Transmit_IT+0x48>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d110      	bne.n	8002c76 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c68:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	1c9a      	adds	r2, r3, #2
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	621a      	str	r2, [r3, #32]
 8002c74:	e008      	b.n	8002c88 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	1c59      	adds	r1, r3, #1
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6211      	str	r1, [r2, #32]
 8002c80:	781a      	ldrb	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	4619      	mov	r1, r3
 8002c96:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10f      	bne.n	8002cbc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002caa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e000      	b.n	8002cc2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002cc0:	2302      	movs	r3, #2
  }
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ce4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7ff fe5a 	bl	80029a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b08c      	sub	sp, #48	; 0x30
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b22      	cmp	r3, #34	; 0x22
 8002d10:	f040 80ab 	bne.w	8002e6a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d1c:	d117      	bne.n	8002d4e <UART_Receive_IT+0x50>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d113      	bne.n	8002d4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d46:	1c9a      	adds	r2, r3, #2
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d4c:	e026      	b.n	8002d9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d60:	d007      	beq.n	8002d72 <UART_Receive_IT+0x74>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10a      	bne.n	8002d80 <UART_Receive_IT+0x82>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7c:	701a      	strb	r2, [r3, #0]
 8002d7e:	e008      	b.n	8002d92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	4619      	mov	r1, r3
 8002daa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d15a      	bne.n	8002e66 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0220 	bic.w	r2, r2, #32
 8002dbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0201 	bic.w	r2, r2, #1
 8002dde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d135      	bne.n	8002e5c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	330c      	adds	r3, #12
 8002dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	e853 3f00 	ldrex	r3, [r3]
 8002e04:	613b      	str	r3, [r7, #16]
   return(result);
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f023 0310 	bic.w	r3, r3, #16
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	330c      	adds	r3, #12
 8002e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e16:	623a      	str	r2, [r7, #32]
 8002e18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1a:	69f9      	ldr	r1, [r7, #28]
 8002e1c:	6a3a      	ldr	r2, [r7, #32]
 8002e1e:	e841 2300 	strex	r3, r2, [r1]
 8002e22:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1e5      	bne.n	8002df6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0310 	and.w	r3, r3, #16
 8002e34:	2b10      	cmp	r3, #16
 8002e36:	d10a      	bne.n	8002e4e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e52:	4619      	mov	r1, r3
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff fdbb 	bl	80029d0 <HAL_UARTEx_RxEventCallback>
 8002e5a:	e002      	b.n	8002e62 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7fd fb39 	bl	80004d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e002      	b.n	8002e6c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	e000      	b.n	8002e6c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002e6a:	2302      	movs	r3, #2
  }
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3730      	adds	r7, #48	; 0x30
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e78:	b0c0      	sub	sp, #256	; 0x100
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e90:	68d9      	ldr	r1, [r3, #12]
 8002e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	ea40 0301 	orr.w	r3, r0, r1
 8002e9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ecc:	f021 010c 	bic.w	r1, r1, #12
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002eda:	430b      	orrs	r3, r1
 8002edc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eee:	6999      	ldr	r1, [r3, #24]
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	ea40 0301 	orr.w	r3, r0, r1
 8002efa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4b8f      	ldr	r3, [pc, #572]	; (8003140 <UART_SetConfig+0x2cc>)
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d005      	beq.n	8002f14 <UART_SetConfig+0xa0>
 8002f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	4b8d      	ldr	r3, [pc, #564]	; (8003144 <UART_SetConfig+0x2d0>)
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d104      	bne.n	8002f1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f14:	f7fe fe14 	bl	8001b40 <HAL_RCC_GetPCLK2Freq>
 8002f18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f1c:	e003      	b.n	8002f26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f1e:	f7fe fdfb 	bl	8001b18 <HAL_RCC_GetPCLK1Freq>
 8002f22:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f30:	f040 810c 	bne.w	800314c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f46:	4622      	mov	r2, r4
 8002f48:	462b      	mov	r3, r5
 8002f4a:	1891      	adds	r1, r2, r2
 8002f4c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f4e:	415b      	adcs	r3, r3
 8002f50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f56:	4621      	mov	r1, r4
 8002f58:	eb12 0801 	adds.w	r8, r2, r1
 8002f5c:	4629      	mov	r1, r5
 8002f5e:	eb43 0901 	adc.w	r9, r3, r1
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	f04f 0300 	mov.w	r3, #0
 8002f6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f76:	4690      	mov	r8, r2
 8002f78:	4699      	mov	r9, r3
 8002f7a:	4623      	mov	r3, r4
 8002f7c:	eb18 0303 	adds.w	r3, r8, r3
 8002f80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f84:	462b      	mov	r3, r5
 8002f86:	eb49 0303 	adc.w	r3, r9, r3
 8002f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f9a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	18db      	adds	r3, r3, r3
 8002fa6:	653b      	str	r3, [r7, #80]	; 0x50
 8002fa8:	4613      	mov	r3, r2
 8002faa:	eb42 0303 	adc.w	r3, r2, r3
 8002fae:	657b      	str	r3, [r7, #84]	; 0x54
 8002fb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002fb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002fb8:	f7fd f90a 	bl	80001d0 <__aeabi_uldivmod>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4b61      	ldr	r3, [pc, #388]	; (8003148 <UART_SetConfig+0x2d4>)
 8002fc2:	fba3 2302 	umull	r2, r3, r3, r2
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	011c      	lsls	r4, r3, #4
 8002fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fd4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002fd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002fdc:	4642      	mov	r2, r8
 8002fde:	464b      	mov	r3, r9
 8002fe0:	1891      	adds	r1, r2, r2
 8002fe2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002fe4:	415b      	adcs	r3, r3
 8002fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fe8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fec:	4641      	mov	r1, r8
 8002fee:	eb12 0a01 	adds.w	sl, r2, r1
 8002ff2:	4649      	mov	r1, r9
 8002ff4:	eb43 0b01 	adc.w	fp, r3, r1
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	f04f 0300 	mov.w	r3, #0
 8003000:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003004:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003008:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800300c:	4692      	mov	sl, r2
 800300e:	469b      	mov	fp, r3
 8003010:	4643      	mov	r3, r8
 8003012:	eb1a 0303 	adds.w	r3, sl, r3
 8003016:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800301a:	464b      	mov	r3, r9
 800301c:	eb4b 0303 	adc.w	r3, fp, r3
 8003020:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003030:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003034:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003038:	460b      	mov	r3, r1
 800303a:	18db      	adds	r3, r3, r3
 800303c:	643b      	str	r3, [r7, #64]	; 0x40
 800303e:	4613      	mov	r3, r2
 8003040:	eb42 0303 	adc.w	r3, r2, r3
 8003044:	647b      	str	r3, [r7, #68]	; 0x44
 8003046:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800304a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800304e:	f7fd f8bf 	bl	80001d0 <__aeabi_uldivmod>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4611      	mov	r1, r2
 8003058:	4b3b      	ldr	r3, [pc, #236]	; (8003148 <UART_SetConfig+0x2d4>)
 800305a:	fba3 2301 	umull	r2, r3, r3, r1
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	2264      	movs	r2, #100	; 0x64
 8003062:	fb02 f303 	mul.w	r3, r2, r3
 8003066:	1acb      	subs	r3, r1, r3
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800306e:	4b36      	ldr	r3, [pc, #216]	; (8003148 <UART_SetConfig+0x2d4>)
 8003070:	fba3 2302 	umull	r2, r3, r3, r2
 8003074:	095b      	lsrs	r3, r3, #5
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800307c:	441c      	add	r4, r3
 800307e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003082:	2200      	movs	r2, #0
 8003084:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003088:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800308c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003090:	4642      	mov	r2, r8
 8003092:	464b      	mov	r3, r9
 8003094:	1891      	adds	r1, r2, r2
 8003096:	63b9      	str	r1, [r7, #56]	; 0x38
 8003098:	415b      	adcs	r3, r3
 800309a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800309c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030a0:	4641      	mov	r1, r8
 80030a2:	1851      	adds	r1, r2, r1
 80030a4:	6339      	str	r1, [r7, #48]	; 0x30
 80030a6:	4649      	mov	r1, r9
 80030a8:	414b      	adcs	r3, r1
 80030aa:	637b      	str	r3, [r7, #52]	; 0x34
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030b8:	4659      	mov	r1, fp
 80030ba:	00cb      	lsls	r3, r1, #3
 80030bc:	4651      	mov	r1, sl
 80030be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030c2:	4651      	mov	r1, sl
 80030c4:	00ca      	lsls	r2, r1, #3
 80030c6:	4610      	mov	r0, r2
 80030c8:	4619      	mov	r1, r3
 80030ca:	4603      	mov	r3, r0
 80030cc:	4642      	mov	r2, r8
 80030ce:	189b      	adds	r3, r3, r2
 80030d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030d4:	464b      	mov	r3, r9
 80030d6:	460a      	mov	r2, r1
 80030d8:	eb42 0303 	adc.w	r3, r2, r3
 80030dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030f4:	460b      	mov	r3, r1
 80030f6:	18db      	adds	r3, r3, r3
 80030f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80030fa:	4613      	mov	r3, r2
 80030fc:	eb42 0303 	adc.w	r3, r2, r3
 8003100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003102:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003106:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800310a:	f7fd f861 	bl	80001d0 <__aeabi_uldivmod>
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <UART_SetConfig+0x2d4>)
 8003114:	fba3 1302 	umull	r1, r3, r3, r2
 8003118:	095b      	lsrs	r3, r3, #5
 800311a:	2164      	movs	r1, #100	; 0x64
 800311c:	fb01 f303 	mul.w	r3, r1, r3
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	3332      	adds	r3, #50	; 0x32
 8003126:	4a08      	ldr	r2, [pc, #32]	; (8003148 <UART_SetConfig+0x2d4>)
 8003128:	fba2 2303 	umull	r2, r3, r2, r3
 800312c:	095b      	lsrs	r3, r3, #5
 800312e:	f003 0207 	and.w	r2, r3, #7
 8003132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4422      	add	r2, r4
 800313a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800313c:	e105      	b.n	800334a <UART_SetConfig+0x4d6>
 800313e:	bf00      	nop
 8003140:	40011000 	.word	0x40011000
 8003144:	40011400 	.word	0x40011400
 8003148:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800314c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003150:	2200      	movs	r2, #0
 8003152:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003156:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800315a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800315e:	4642      	mov	r2, r8
 8003160:	464b      	mov	r3, r9
 8003162:	1891      	adds	r1, r2, r2
 8003164:	6239      	str	r1, [r7, #32]
 8003166:	415b      	adcs	r3, r3
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
 800316a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800316e:	4641      	mov	r1, r8
 8003170:	1854      	adds	r4, r2, r1
 8003172:	4649      	mov	r1, r9
 8003174:	eb43 0501 	adc.w	r5, r3, r1
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	00eb      	lsls	r3, r5, #3
 8003182:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003186:	00e2      	lsls	r2, r4, #3
 8003188:	4614      	mov	r4, r2
 800318a:	461d      	mov	r5, r3
 800318c:	4643      	mov	r3, r8
 800318e:	18e3      	adds	r3, r4, r3
 8003190:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003194:	464b      	mov	r3, r9
 8003196:	eb45 0303 	adc.w	r3, r5, r3
 800319a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800319e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031ba:	4629      	mov	r1, r5
 80031bc:	008b      	lsls	r3, r1, #2
 80031be:	4621      	mov	r1, r4
 80031c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031c4:	4621      	mov	r1, r4
 80031c6:	008a      	lsls	r2, r1, #2
 80031c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80031cc:	f7fd f800 	bl	80001d0 <__aeabi_uldivmod>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4b60      	ldr	r3, [pc, #384]	; (8003358 <UART_SetConfig+0x4e4>)
 80031d6:	fba3 2302 	umull	r2, r3, r3, r2
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	011c      	lsls	r4, r3, #4
 80031de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031e2:	2200      	movs	r2, #0
 80031e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031f0:	4642      	mov	r2, r8
 80031f2:	464b      	mov	r3, r9
 80031f4:	1891      	adds	r1, r2, r2
 80031f6:	61b9      	str	r1, [r7, #24]
 80031f8:	415b      	adcs	r3, r3
 80031fa:	61fb      	str	r3, [r7, #28]
 80031fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003200:	4641      	mov	r1, r8
 8003202:	1851      	adds	r1, r2, r1
 8003204:	6139      	str	r1, [r7, #16]
 8003206:	4649      	mov	r1, r9
 8003208:	414b      	adcs	r3, r1
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	f04f 0300 	mov.w	r3, #0
 8003214:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003218:	4659      	mov	r1, fp
 800321a:	00cb      	lsls	r3, r1, #3
 800321c:	4651      	mov	r1, sl
 800321e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003222:	4651      	mov	r1, sl
 8003224:	00ca      	lsls	r2, r1, #3
 8003226:	4610      	mov	r0, r2
 8003228:	4619      	mov	r1, r3
 800322a:	4603      	mov	r3, r0
 800322c:	4642      	mov	r2, r8
 800322e:	189b      	adds	r3, r3, r2
 8003230:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003234:	464b      	mov	r3, r9
 8003236:	460a      	mov	r2, r1
 8003238:	eb42 0303 	adc.w	r3, r2, r3
 800323c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	67bb      	str	r3, [r7, #120]	; 0x78
 800324a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003258:	4649      	mov	r1, r9
 800325a:	008b      	lsls	r3, r1, #2
 800325c:	4641      	mov	r1, r8
 800325e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003262:	4641      	mov	r1, r8
 8003264:	008a      	lsls	r2, r1, #2
 8003266:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800326a:	f7fc ffb1 	bl	80001d0 <__aeabi_uldivmod>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4b39      	ldr	r3, [pc, #228]	; (8003358 <UART_SetConfig+0x4e4>)
 8003274:	fba3 1302 	umull	r1, r3, r3, r2
 8003278:	095b      	lsrs	r3, r3, #5
 800327a:	2164      	movs	r1, #100	; 0x64
 800327c:	fb01 f303 	mul.w	r3, r1, r3
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	3332      	adds	r3, #50	; 0x32
 8003286:	4a34      	ldr	r2, [pc, #208]	; (8003358 <UART_SetConfig+0x4e4>)
 8003288:	fba2 2303 	umull	r2, r3, r2, r3
 800328c:	095b      	lsrs	r3, r3, #5
 800328e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003292:	441c      	add	r4, r3
 8003294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003298:	2200      	movs	r2, #0
 800329a:	673b      	str	r3, [r7, #112]	; 0x70
 800329c:	677a      	str	r2, [r7, #116]	; 0x74
 800329e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80032a2:	4642      	mov	r2, r8
 80032a4:	464b      	mov	r3, r9
 80032a6:	1891      	adds	r1, r2, r2
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	415b      	adcs	r3, r3
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032b2:	4641      	mov	r1, r8
 80032b4:	1851      	adds	r1, r2, r1
 80032b6:	6039      	str	r1, [r7, #0]
 80032b8:	4649      	mov	r1, r9
 80032ba:	414b      	adcs	r3, r1
 80032bc:	607b      	str	r3, [r7, #4]
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032ca:	4659      	mov	r1, fp
 80032cc:	00cb      	lsls	r3, r1, #3
 80032ce:	4651      	mov	r1, sl
 80032d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032d4:	4651      	mov	r1, sl
 80032d6:	00ca      	lsls	r2, r1, #3
 80032d8:	4610      	mov	r0, r2
 80032da:	4619      	mov	r1, r3
 80032dc:	4603      	mov	r3, r0
 80032de:	4642      	mov	r2, r8
 80032e0:	189b      	adds	r3, r3, r2
 80032e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80032e4:	464b      	mov	r3, r9
 80032e6:	460a      	mov	r2, r1
 80032e8:	eb42 0303 	adc.w	r3, r2, r3
 80032ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	663b      	str	r3, [r7, #96]	; 0x60
 80032f8:	667a      	str	r2, [r7, #100]	; 0x64
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003306:	4649      	mov	r1, r9
 8003308:	008b      	lsls	r3, r1, #2
 800330a:	4641      	mov	r1, r8
 800330c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003310:	4641      	mov	r1, r8
 8003312:	008a      	lsls	r2, r1, #2
 8003314:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003318:	f7fc ff5a 	bl	80001d0 <__aeabi_uldivmod>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <UART_SetConfig+0x4e4>)
 8003322:	fba3 1302 	umull	r1, r3, r3, r2
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	2164      	movs	r1, #100	; 0x64
 800332a:	fb01 f303 	mul.w	r3, r1, r3
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	3332      	adds	r3, #50	; 0x32
 8003334:	4a08      	ldr	r2, [pc, #32]	; (8003358 <UART_SetConfig+0x4e4>)
 8003336:	fba2 2303 	umull	r2, r3, r2, r3
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	f003 020f 	and.w	r2, r3, #15
 8003340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4422      	add	r2, r4
 8003348:	609a      	str	r2, [r3, #8]
}
 800334a:	bf00      	nop
 800334c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003350:	46bd      	mov	sp, r7
 8003352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003356:	bf00      	nop
 8003358:	51eb851f 	.word	0x51eb851f

0800335c <__NVIC_SetPriority>:
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	6039      	str	r1, [r7, #0]
 8003366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336c:	2b00      	cmp	r3, #0
 800336e:	db0a      	blt.n	8003386 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	b2da      	uxtb	r2, r3
 8003374:	490c      	ldr	r1, [pc, #48]	; (80033a8 <__NVIC_SetPriority+0x4c>)
 8003376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337a:	0112      	lsls	r2, r2, #4
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	440b      	add	r3, r1
 8003380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003384:	e00a      	b.n	800339c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	b2da      	uxtb	r2, r3
 800338a:	4908      	ldr	r1, [pc, #32]	; (80033ac <__NVIC_SetPriority+0x50>)
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	3b04      	subs	r3, #4
 8003394:	0112      	lsls	r2, r2, #4
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	440b      	add	r3, r1
 800339a:	761a      	strb	r2, [r3, #24]
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	e000e100 	.word	0xe000e100
 80033ac:	e000ed00 	.word	0xe000ed00

080033b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80033b4:	4b05      	ldr	r3, [pc, #20]	; (80033cc <SysTick_Handler+0x1c>)
 80033b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80033b8:	f001 fd28 	bl	8004e0c <xTaskGetSchedulerState>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d001      	beq.n	80033c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80033c2:	f002 fb11 	bl	80059e8 <xPortSysTickHandler>
  }
}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	e000e010 	.word	0xe000e010

080033d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80033d4:	2100      	movs	r1, #0
 80033d6:	f06f 0004 	mvn.w	r0, #4
 80033da:	f7ff ffbf 	bl	800335c <__NVIC_SetPriority>
#endif
}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
	...

080033e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033ea:	f3ef 8305 	mrs	r3, IPSR
 80033ee:	603b      	str	r3, [r7, #0]
  return(result);
 80033f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80033f6:	f06f 0305 	mvn.w	r3, #5
 80033fa:	607b      	str	r3, [r7, #4]
 80033fc:	e00c      	b.n	8003418 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80033fe:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <osKernelInitialize+0x44>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d105      	bne.n	8003412 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003406:	4b08      	ldr	r3, [pc, #32]	; (8003428 <osKernelInitialize+0x44>)
 8003408:	2201      	movs	r2, #1
 800340a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800340c:	2300      	movs	r3, #0
 800340e:	607b      	str	r3, [r7, #4]
 8003410:	e002      	b.n	8003418 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003412:	f04f 33ff 	mov.w	r3, #4294967295
 8003416:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003418:	687b      	ldr	r3, [r7, #4]
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	20000150 	.word	0x20000150

0800342c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003432:	f3ef 8305 	mrs	r3, IPSR
 8003436:	603b      	str	r3, [r7, #0]
  return(result);
 8003438:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <osKernelStart+0x1a>
    stat = osErrorISR;
 800343e:	f06f 0305 	mvn.w	r3, #5
 8003442:	607b      	str	r3, [r7, #4]
 8003444:	e010      	b.n	8003468 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003446:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <osKernelStart+0x48>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d109      	bne.n	8003462 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800344e:	f7ff ffbf 	bl	80033d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003452:	4b08      	ldr	r3, [pc, #32]	; (8003474 <osKernelStart+0x48>)
 8003454:	2202      	movs	r2, #2
 8003456:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003458:	f001 f87c 	bl	8004554 <vTaskStartScheduler>
      stat = osOK;
 800345c:	2300      	movs	r3, #0
 800345e:	607b      	str	r3, [r7, #4]
 8003460:	e002      	b.n	8003468 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003462:	f04f 33ff 	mov.w	r3, #4294967295
 8003466:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003468:	687b      	ldr	r3, [r7, #4]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	20000150 	.word	0x20000150

08003478 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003478:	b580      	push	{r7, lr}
 800347a:	b08e      	sub	sp, #56	; 0x38
 800347c:	af04      	add	r7, sp, #16
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003484:	2300      	movs	r3, #0
 8003486:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003488:	f3ef 8305 	mrs	r3, IPSR
 800348c:	617b      	str	r3, [r7, #20]
  return(result);
 800348e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003490:	2b00      	cmp	r3, #0
 8003492:	d17e      	bne.n	8003592 <osThreadNew+0x11a>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d07b      	beq.n	8003592 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800349a:	2380      	movs	r3, #128	; 0x80
 800349c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800349e:	2318      	movs	r3, #24
 80034a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80034a6:	f04f 33ff 	mov.w	r3, #4294967295
 80034aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d045      	beq.n	800353e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <osThreadNew+0x48>
        name = attr->name;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <osThreadNew+0x6e>
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	2b38      	cmp	r3, #56	; 0x38
 80034d8:	d805      	bhi.n	80034e6 <osThreadNew+0x6e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <osThreadNew+0x72>
        return (NULL);
 80034e6:	2300      	movs	r3, #0
 80034e8:	e054      	b.n	8003594 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	089b      	lsrs	r3, r3, #2
 80034f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00e      	beq.n	8003520 <osThreadNew+0xa8>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	2bbb      	cmp	r3, #187	; 0xbb
 8003508:	d90a      	bls.n	8003520 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800350e:	2b00      	cmp	r3, #0
 8003510:	d006      	beq.n	8003520 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <osThreadNew+0xa8>
        mem = 1;
 800351a:	2301      	movs	r3, #1
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	e010      	b.n	8003542 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10c      	bne.n	8003542 <osThreadNew+0xca>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d108      	bne.n	8003542 <osThreadNew+0xca>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d104      	bne.n	8003542 <osThreadNew+0xca>
          mem = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	61bb      	str	r3, [r7, #24]
 800353c:	e001      	b.n	8003542 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800353e:	2300      	movs	r3, #0
 8003540:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d110      	bne.n	800356a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003550:	9202      	str	r2, [sp, #8]
 8003552:	9301      	str	r3, [sp, #4]
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	6a3a      	ldr	r2, [r7, #32]
 800355c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 fe0c 	bl	800417c <xTaskCreateStatic>
 8003564:	4603      	mov	r3, r0
 8003566:	613b      	str	r3, [r7, #16]
 8003568:	e013      	b.n	8003592 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d110      	bne.n	8003592 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	b29a      	uxth	r2, r3
 8003574:	f107 0310 	add.w	r3, r7, #16
 8003578:	9301      	str	r3, [sp, #4]
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 fe57 	bl	8004236 <xTaskCreate>
 8003588:	4603      	mov	r3, r0
 800358a:	2b01      	cmp	r3, #1
 800358c:	d001      	beq.n	8003592 <osThreadNew+0x11a>
            hTask = NULL;
 800358e:	2300      	movs	r3, #0
 8003590:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003592:	693b      	ldr	r3, [r7, #16]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3728      	adds	r7, #40	; 0x28
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035a4:	f3ef 8305 	mrs	r3, IPSR
 80035a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80035aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <osDelay+0x1c>
    stat = osErrorISR;
 80035b0:	f06f 0305 	mvn.w	r3, #5
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	e007      	b.n	80035c8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 ff92 	bl	80044ec <vTaskDelay>
    }
  }

  return (stat);
 80035c8:	68fb      	ldr	r3, [r7, #12]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4a07      	ldr	r2, [pc, #28]	; (8003600 <vApplicationGetIdleTaskMemory+0x2c>)
 80035e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	4a06      	ldr	r2, [pc, #24]	; (8003604 <vApplicationGetIdleTaskMemory+0x30>)
 80035ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2280      	movs	r2, #128	; 0x80
 80035f0:	601a      	str	r2, [r3, #0]
}
 80035f2:	bf00      	nop
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000154 	.word	0x20000154
 8003604:	20000210 	.word	0x20000210

08003608 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4a07      	ldr	r2, [pc, #28]	; (8003634 <vApplicationGetTimerTaskMemory+0x2c>)
 8003618:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	4a06      	ldr	r2, [pc, #24]	; (8003638 <vApplicationGetTimerTaskMemory+0x30>)
 800361e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003626:	601a      	str	r2, [r3, #0]
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	20000410 	.word	0x20000410
 8003638:	200004cc 	.word	0x200004cc

0800363c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f103 0208 	add.w	r2, r3, #8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f04f 32ff 	mov.w	r2, #4294967295
 8003654:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f103 0208 	add.w	r2, r3, #8
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f103 0208 	add.w	r2, r3, #8
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003696:	b480      	push	{r7}
 8003698:	b085      	sub	sp, #20
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	601a      	str	r2, [r3, #0]
}
 80036d2:	bf00      	nop
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036de:	b480      	push	{r7}
 80036e0:	b085      	sub	sp, #20
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f4:	d103      	bne.n	80036fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	e00c      	b.n	8003718 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3308      	adds	r3, #8
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	e002      	b.n	800370c <vListInsert+0x2e>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	429a      	cmp	r2, r3
 8003716:	d2f6      	bcs.n	8003706 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	601a      	str	r2, [r3, #0]
}
 8003744:	bf00      	nop
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6892      	ldr	r2, [r2, #8]
 8003766:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6852      	ldr	r2, [r2, #4]
 8003770:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	429a      	cmp	r2, r3
 800377a:	d103      	bne.n	8003784 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	1e5a      	subs	r2, r3, #1
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10a      	bne.n	80037ce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f3bf 8f6f 	isb	sy
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80037ca:	bf00      	nop
 80037cc:	e7fe      	b.n	80037cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80037ce:	f002 f879 	bl	80058c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037da:	68f9      	ldr	r1, [r7, #12]
 80037dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	441a      	add	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fe:	3b01      	subs	r3, #1
 8003800:	68f9      	ldr	r1, [r7, #12]
 8003802:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003804:	fb01 f303 	mul.w	r3, r1, r3
 8003808:	441a      	add	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	22ff      	movs	r2, #255	; 0xff
 8003812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	22ff      	movs	r2, #255	; 0xff
 800381a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d114      	bne.n	800384e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d01a      	beq.n	8003862 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	3310      	adds	r3, #16
 8003830:	4618      	mov	r0, r3
 8003832:	f001 f929 	bl	8004a88 <xTaskRemoveFromEventList>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d012      	beq.n	8003862 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800383c:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <xQueueGenericReset+0xcc>)
 800383e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	e009      	b.n	8003862 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	3310      	adds	r3, #16
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff fef2 	bl	800363c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	3324      	adds	r3, #36	; 0x24
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff feed 	bl	800363c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003862:	f002 f85f 	bl	8005924 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003866:	2301      	movs	r3, #1
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	e000ed04 	.word	0xe000ed04

08003874 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08e      	sub	sp, #56	; 0x38
 8003878:	af02      	add	r7, sp, #8
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10a      	bne.n	800389e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800389a:	bf00      	nop
 800389c:	e7fe      	b.n	800389c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10a      	bne.n	80038ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80038a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80038b6:	bf00      	nop
 80038b8:	e7fe      	b.n	80038b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <xQueueGenericCreateStatic+0x52>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <xQueueGenericCreateStatic+0x56>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <xQueueGenericCreateStatic+0x58>
 80038ca:	2300      	movs	r3, #0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10a      	bne.n	80038e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80038d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d4:	f383 8811 	msr	BASEPRI, r3
 80038d8:	f3bf 8f6f 	isb	sy
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	623b      	str	r3, [r7, #32]
}
 80038e2:	bf00      	nop
 80038e4:	e7fe      	b.n	80038e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d102      	bne.n	80038f2 <xQueueGenericCreateStatic+0x7e>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <xQueueGenericCreateStatic+0x82>
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <xQueueGenericCreateStatic+0x84>
 80038f6:	2300      	movs	r3, #0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10a      	bne.n	8003912 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	61fb      	str	r3, [r7, #28]
}
 800390e:	bf00      	nop
 8003910:	e7fe      	b.n	8003910 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003912:	2350      	movs	r3, #80	; 0x50
 8003914:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2b50      	cmp	r3, #80	; 0x50
 800391a:	d00a      	beq.n	8003932 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800391c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003920:	f383 8811 	msr	BASEPRI, r3
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	61bb      	str	r3, [r7, #24]
}
 800392e:	bf00      	nop
 8003930:	e7fe      	b.n	8003930 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003932:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00d      	beq.n	800395a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003946:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800394a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	4613      	mov	r3, r2
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	68b9      	ldr	r1, [r7, #8]
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f805 	bl	8003964 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800395a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800395c:	4618      	mov	r0, r3
 800395e:	3730      	adds	r7, #48	; 0x30
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d103      	bne.n	8003980 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	e002      	b.n	8003986 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003992:	2101      	movs	r1, #1
 8003994:	69b8      	ldr	r0, [r7, #24]
 8003996:	f7ff ff05 	bl	80037a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	78fa      	ldrb	r2, [r7, #3]
 800399e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08e      	sub	sp, #56	; 0x38
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039ba:	2300      	movs	r3, #0
 80039bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80039c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10a      	bne.n	80039de <xQueueGenericSend+0x32>
	__asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039da:	bf00      	nop
 80039dc:	e7fe      	b.n	80039dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d103      	bne.n	80039ec <xQueueGenericSend+0x40>
 80039e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <xQueueGenericSend+0x44>
 80039ec:	2301      	movs	r3, #1
 80039ee:	e000      	b.n	80039f2 <xQueueGenericSend+0x46>
 80039f0:	2300      	movs	r3, #0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10a      	bne.n	8003a0c <xQueueGenericSend+0x60>
	__asm volatile
 80039f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fa:	f383 8811 	msr	BASEPRI, r3
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a08:	bf00      	nop
 8003a0a:	e7fe      	b.n	8003a0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d103      	bne.n	8003a1a <xQueueGenericSend+0x6e>
 8003a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <xQueueGenericSend+0x72>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <xQueueGenericSend+0x74>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <xQueueGenericSend+0x8e>
	__asm volatile
 8003a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	623b      	str	r3, [r7, #32]
}
 8003a36:	bf00      	nop
 8003a38:	e7fe      	b.n	8003a38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a3a:	f001 f9e7 	bl	8004e0c <xTaskGetSchedulerState>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d102      	bne.n	8003a4a <xQueueGenericSend+0x9e>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <xQueueGenericSend+0xa2>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <xQueueGenericSend+0xa4>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10a      	bne.n	8003a6a <xQueueGenericSend+0xbe>
	__asm volatile
 8003a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	61fb      	str	r3, [r7, #28]
}
 8003a66:	bf00      	nop
 8003a68:	e7fe      	b.n	8003a68 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a6a:	f001 ff2b 	bl	80058c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d302      	bcc.n	8003a80 <xQueueGenericSend+0xd4>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d129      	bne.n	8003ad4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a86:	f000 fa0b 	bl	8003ea0 <prvCopyDataToQueue>
 8003a8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d010      	beq.n	8003ab6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a96:	3324      	adds	r3, #36	; 0x24
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fff5 	bl	8004a88 <xTaskRemoveFromEventList>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d013      	beq.n	8003acc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003aa4:	4b3f      	ldr	r3, [pc, #252]	; (8003ba4 <xQueueGenericSend+0x1f8>)
 8003aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	e00a      	b.n	8003acc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d007      	beq.n	8003acc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003abc:	4b39      	ldr	r3, [pc, #228]	; (8003ba4 <xQueueGenericSend+0x1f8>)
 8003abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	f3bf 8f4f 	dsb	sy
 8003ac8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003acc:	f001 ff2a 	bl	8005924 <vPortExitCritical>
				return pdPASS;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e063      	b.n	8003b9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d103      	bne.n	8003ae2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ada:	f001 ff23 	bl	8005924 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e05c      	b.n	8003b9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d106      	bne.n	8003af6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ae8:	f107 0314 	add.w	r3, r7, #20
 8003aec:	4618      	mov	r0, r3
 8003aee:	f001 f82f 	bl	8004b50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003af2:	2301      	movs	r3, #1
 8003af4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003af6:	f001 ff15 	bl	8005924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003afa:	f000 fd9b 	bl	8004634 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003afe:	f001 fee1 	bl	80058c4 <vPortEnterCritical>
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b08:	b25b      	sxtb	r3, r3
 8003b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0e:	d103      	bne.n	8003b18 <xQueueGenericSend+0x16c>
 8003b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b1e:	b25b      	sxtb	r3, r3
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b24:	d103      	bne.n	8003b2e <xQueueGenericSend+0x182>
 8003b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b2e:	f001 fef9 	bl	8005924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b32:	1d3a      	adds	r2, r7, #4
 8003b34:	f107 0314 	add.w	r3, r7, #20
 8003b38:	4611      	mov	r1, r2
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f001 f81e 	bl	8004b7c <xTaskCheckForTimeOut>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d124      	bne.n	8003b90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b48:	f000 faa2 	bl	8004090 <prvIsQueueFull>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d018      	beq.n	8003b84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b54:	3310      	adds	r3, #16
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	4611      	mov	r1, r2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 ff44 	bl	80049e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b62:	f000 fa2d 	bl	8003fc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b66:	f000 fd73 	bl	8004650 <xTaskResumeAll>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f47f af7c 	bne.w	8003a6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003b72:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <xQueueGenericSend+0x1f8>)
 8003b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	e772      	b.n	8003a6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b86:	f000 fa1b 	bl	8003fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b8a:	f000 fd61 	bl	8004650 <xTaskResumeAll>
 8003b8e:	e76c      	b.n	8003a6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b92:	f000 fa15 	bl	8003fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b96:	f000 fd5b 	bl	8004650 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3738      	adds	r7, #56	; 0x38
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	e000ed04 	.word	0xe000ed04

08003ba8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b090      	sub	sp, #64	; 0x40
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
 8003bb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10a      	bne.n	8003bd6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003bd2:	bf00      	nop
 8003bd4:	e7fe      	b.n	8003bd4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d103      	bne.n	8003be4 <xQueueGenericSendFromISR+0x3c>
 8003bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <xQueueGenericSendFromISR+0x40>
 8003be4:	2301      	movs	r3, #1
 8003be6:	e000      	b.n	8003bea <xQueueGenericSendFromISR+0x42>
 8003be8:	2300      	movs	r3, #0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10a      	bne.n	8003c04 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf2:	f383 8811 	msr	BASEPRI, r3
 8003bf6:	f3bf 8f6f 	isb	sy
 8003bfa:	f3bf 8f4f 	dsb	sy
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c00:	bf00      	nop
 8003c02:	e7fe      	b.n	8003c02 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d103      	bne.n	8003c12 <xQueueGenericSendFromISR+0x6a>
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <xQueueGenericSendFromISR+0x6e>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <xQueueGenericSendFromISR+0x70>
 8003c16:	2300      	movs	r3, #0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10a      	bne.n	8003c32 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c20:	f383 8811 	msr	BASEPRI, r3
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	623b      	str	r3, [r7, #32]
}
 8003c2e:	bf00      	nop
 8003c30:	e7fe      	b.n	8003c30 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c32:	f001 ff29 	bl	8005a88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c36:	f3ef 8211 	mrs	r2, BASEPRI
 8003c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3e:	f383 8811 	msr	BASEPRI, r3
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	61fa      	str	r2, [r7, #28]
 8003c4c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c4e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c50:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d302      	bcc.n	8003c64 <xQueueGenericSendFromISR+0xbc>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d12f      	bne.n	8003cc4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c72:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	68b9      	ldr	r1, [r7, #8]
 8003c78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c7a:	f000 f911 	bl	8003ea0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c7e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c86:	d112      	bne.n	8003cae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d016      	beq.n	8003cbe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c92:	3324      	adds	r3, #36	; 0x24
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 fef7 	bl	8004a88 <xTaskRemoveFromEventList>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00e      	beq.n	8003cbe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00b      	beq.n	8003cbe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	e007      	b.n	8003cbe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003cae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	b25a      	sxtb	r2, r3
 8003cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003cc2:	e001      	b.n	8003cc8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003cd2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3740      	adds	r7, #64	; 0x40
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08c      	sub	sp, #48	; 0x30
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003cec:	2300      	movs	r3, #0
 8003cee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10a      	bne.n	8003d10 <xQueueReceive+0x30>
	__asm volatile
 8003cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	623b      	str	r3, [r7, #32]
}
 8003d0c:	bf00      	nop
 8003d0e:	e7fe      	b.n	8003d0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d103      	bne.n	8003d1e <xQueueReceive+0x3e>
 8003d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <xQueueReceive+0x42>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <xQueueReceive+0x44>
 8003d22:	2300      	movs	r3, #0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10a      	bne.n	8003d3e <xQueueReceive+0x5e>
	__asm volatile
 8003d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2c:	f383 8811 	msr	BASEPRI, r3
 8003d30:	f3bf 8f6f 	isb	sy
 8003d34:	f3bf 8f4f 	dsb	sy
 8003d38:	61fb      	str	r3, [r7, #28]
}
 8003d3a:	bf00      	nop
 8003d3c:	e7fe      	b.n	8003d3c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d3e:	f001 f865 	bl	8004e0c <xTaskGetSchedulerState>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d102      	bne.n	8003d4e <xQueueReceive+0x6e>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <xQueueReceive+0x72>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <xQueueReceive+0x74>
 8003d52:	2300      	movs	r3, #0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10a      	bne.n	8003d6e <xQueueReceive+0x8e>
	__asm volatile
 8003d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	61bb      	str	r3, [r7, #24]
}
 8003d6a:	bf00      	nop
 8003d6c:	e7fe      	b.n	8003d6c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d6e:	f001 fda9 	bl	80058c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d01f      	beq.n	8003dbe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d7e:	68b9      	ldr	r1, [r7, #8]
 8003d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d82:	f000 f8f7 	bl	8003f74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	1e5a      	subs	r2, r3, #1
 8003d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00f      	beq.n	8003db6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	3310      	adds	r3, #16
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fe74 	bl	8004a88 <xTaskRemoveFromEventList>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d007      	beq.n	8003db6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003da6:	4b3d      	ldr	r3, [pc, #244]	; (8003e9c <xQueueReceive+0x1bc>)
 8003da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003db6:	f001 fdb5 	bl	8005924 <vPortExitCritical>
				return pdPASS;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e069      	b.n	8003e92 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d103      	bne.n	8003dcc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003dc4:	f001 fdae 	bl	8005924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	e062      	b.n	8003e92 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003dd2:	f107 0310 	add.w	r3, r7, #16
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 feba 	bl	8004b50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003de0:	f001 fda0 	bl	8005924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003de4:	f000 fc26 	bl	8004634 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003de8:	f001 fd6c 	bl	80058c4 <vPortEnterCritical>
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003df2:	b25b      	sxtb	r3, r3
 8003df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df8:	d103      	bne.n	8003e02 <xQueueReceive+0x122>
 8003dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e08:	b25b      	sxtb	r3, r3
 8003e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0e:	d103      	bne.n	8003e18 <xQueueReceive+0x138>
 8003e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e18:	f001 fd84 	bl	8005924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e1c:	1d3a      	adds	r2, r7, #4
 8003e1e:	f107 0310 	add.w	r3, r7, #16
 8003e22:	4611      	mov	r1, r2
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 fea9 	bl	8004b7c <xTaskCheckForTimeOut>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d123      	bne.n	8003e78 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e32:	f000 f917 	bl	8004064 <prvIsQueueEmpty>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d017      	beq.n	8003e6c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3e:	3324      	adds	r3, #36	; 0x24
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	4611      	mov	r1, r2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fdcf 	bl	80049e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e4c:	f000 f8b8 	bl	8003fc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e50:	f000 fbfe 	bl	8004650 <xTaskResumeAll>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d189      	bne.n	8003d6e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003e5a:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <xQueueReceive+0x1bc>)
 8003e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	e780      	b.n	8003d6e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e6e:	f000 f8a7 	bl	8003fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e72:	f000 fbed 	bl	8004650 <xTaskResumeAll>
 8003e76:	e77a      	b.n	8003d6e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e7a:	f000 f8a1 	bl	8003fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e7e:	f000 fbe7 	bl	8004650 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e84:	f000 f8ee 	bl	8004064 <prvIsQueueEmpty>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f43f af6f 	beq.w	8003d6e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3730      	adds	r7, #48	; 0x30
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	e000ed04 	.word	0xe000ed04

08003ea0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10d      	bne.n	8003eda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d14d      	bne.n	8003f62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 ffbc 	bl	8004e48 <xTaskPriorityDisinherit>
 8003ed0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	609a      	str	r2, [r3, #8]
 8003ed8:	e043      	b.n	8003f62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d119      	bne.n	8003f14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6858      	ldr	r0, [r3, #4]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	461a      	mov	r2, r3
 8003eea:	68b9      	ldr	r1, [r7, #8]
 8003eec:	f002 f81c 	bl	8005f28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	441a      	add	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d32b      	bcc.n	8003f62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	605a      	str	r2, [r3, #4]
 8003f12:	e026      	b.n	8003f62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	68d8      	ldr	r0, [r3, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	68b9      	ldr	r1, [r7, #8]
 8003f20:	f002 f802 	bl	8005f28 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	425b      	negs	r3, r3
 8003f2e:	441a      	add	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d207      	bcs.n	8003f50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	425b      	negs	r3, r3
 8003f4a:	441a      	add	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d105      	bne.n	8003f62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f6a:	697b      	ldr	r3, [r7, #20]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d018      	beq.n	8003fb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	441a      	add	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d303      	bcc.n	8003fa8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68d9      	ldr	r1, [r3, #12]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	6838      	ldr	r0, [r7, #0]
 8003fb4:	f001 ffb8 	bl	8005f28 <memcpy>
	}
}
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003fc8:	f001 fc7c 	bl	80058c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fd2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fd4:	e011      	b.n	8003ffa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d012      	beq.n	8004004 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3324      	adds	r3, #36	; 0x24
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fd50 	bl	8004a88 <xTaskRemoveFromEventList>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003fee:	f000 fe27 	bl	8004c40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	dce9      	bgt.n	8003fd6 <prvUnlockQueue+0x16>
 8004002:	e000      	b.n	8004006 <prvUnlockQueue+0x46>
					break;
 8004004:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	22ff      	movs	r2, #255	; 0xff
 800400a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800400e:	f001 fc89 	bl	8005924 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004012:	f001 fc57 	bl	80058c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800401c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800401e:	e011      	b.n	8004044 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d012      	beq.n	800404e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3310      	adds	r3, #16
 800402c:	4618      	mov	r0, r3
 800402e:	f000 fd2b 	bl	8004a88 <xTaskRemoveFromEventList>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004038:	f000 fe02 	bl	8004c40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800403c:	7bbb      	ldrb	r3, [r7, #14]
 800403e:	3b01      	subs	r3, #1
 8004040:	b2db      	uxtb	r3, r3
 8004042:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004048:	2b00      	cmp	r3, #0
 800404a:	dce9      	bgt.n	8004020 <prvUnlockQueue+0x60>
 800404c:	e000      	b.n	8004050 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800404e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	22ff      	movs	r2, #255	; 0xff
 8004054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004058:	f001 fc64 	bl	8005924 <vPortExitCritical>
}
 800405c:	bf00      	nop
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800406c:	f001 fc2a 	bl	80058c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	2b00      	cmp	r3, #0
 8004076:	d102      	bne.n	800407e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004078:	2301      	movs	r3, #1
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	e001      	b.n	8004082 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004082:	f001 fc4f 	bl	8005924 <vPortExitCritical>

	return xReturn;
 8004086:	68fb      	ldr	r3, [r7, #12]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004098:	f001 fc14 	bl	80058c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d102      	bne.n	80040ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80040a8:	2301      	movs	r3, #1
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	e001      	b.n	80040b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040b2:	f001 fc37 	bl	8005924 <vPortExitCritical>

	return xReturn;
 80040b6:	68fb      	ldr	r3, [r7, #12]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040ca:	2300      	movs	r3, #0
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	e014      	b.n	80040fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80040d0:	4a0f      	ldr	r2, [pc, #60]	; (8004110 <vQueueAddToRegistry+0x50>)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10b      	bne.n	80040f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80040dc:	490c      	ldr	r1, [pc, #48]	; (8004110 <vQueueAddToRegistry+0x50>)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80040e6:	4a0a      	ldr	r2, [pc, #40]	; (8004110 <vQueueAddToRegistry+0x50>)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4413      	add	r3, r2
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80040f2:	e006      	b.n	8004102 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	3301      	adds	r3, #1
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b07      	cmp	r3, #7
 80040fe:	d9e7      	bls.n	80040d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004100:	bf00      	nop
 8004102:	bf00      	nop
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	200008cc 	.word	0x200008cc

08004114 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004124:	f001 fbce 	bl	80058c4 <vPortEnterCritical>
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800412e:	b25b      	sxtb	r3, r3
 8004130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004134:	d103      	bne.n	800413e <vQueueWaitForMessageRestricted+0x2a>
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004144:	b25b      	sxtb	r3, r3
 8004146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414a:	d103      	bne.n	8004154 <vQueueWaitForMessageRestricted+0x40>
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004154:	f001 fbe6 	bl	8005924 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	2b00      	cmp	r3, #0
 800415e:	d106      	bne.n	800416e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	3324      	adds	r3, #36	; 0x24
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fc61 	bl	8004a30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800416e:	6978      	ldr	r0, [r7, #20]
 8004170:	f7ff ff26 	bl	8003fc0 <prvUnlockQueue>
	}
 8004174:	bf00      	nop
 8004176:	3718      	adds	r7, #24
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08e      	sub	sp, #56	; 0x38
 8004180:	af04      	add	r7, sp, #16
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800418a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10a      	bne.n	80041a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	623b      	str	r3, [r7, #32]
}
 80041a2:	bf00      	nop
 80041a4:	e7fe      	b.n	80041a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10a      	bne.n	80041c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80041ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b0:	f383 8811 	msr	BASEPRI, r3
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	61fb      	str	r3, [r7, #28]
}
 80041be:	bf00      	nop
 80041c0:	e7fe      	b.n	80041c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80041c2:	23bc      	movs	r3, #188	; 0xbc
 80041c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	2bbc      	cmp	r3, #188	; 0xbc
 80041ca:	d00a      	beq.n	80041e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80041cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d0:	f383 8811 	msr	BASEPRI, r3
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	61bb      	str	r3, [r7, #24]
}
 80041de:	bf00      	nop
 80041e0:	e7fe      	b.n	80041e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d01e      	beq.n	8004228 <xTaskCreateStatic+0xac>
 80041ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d01b      	beq.n	8004228 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	2202      	movs	r2, #2
 80041fe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004202:	2300      	movs	r3, #0
 8004204:	9303      	str	r3, [sp, #12]
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	9302      	str	r3, [sp, #8]
 800420a:	f107 0314 	add.w	r3, r7, #20
 800420e:	9301      	str	r3, [sp, #4]
 8004210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	68b9      	ldr	r1, [r7, #8]
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 f850 	bl	80042c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004220:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004222:	f000 f8f3 	bl	800440c <prvAddNewTaskToReadyList>
 8004226:	e001      	b.n	800422c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800422c:	697b      	ldr	r3, [r7, #20]
	}
 800422e:	4618      	mov	r0, r3
 8004230:	3728      	adds	r7, #40	; 0x28
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004236:	b580      	push	{r7, lr}
 8004238:	b08c      	sub	sp, #48	; 0x30
 800423a:	af04      	add	r7, sp, #16
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	603b      	str	r3, [r7, #0]
 8004242:	4613      	mov	r3, r2
 8004244:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004246:	88fb      	ldrh	r3, [r7, #6]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4618      	mov	r0, r3
 800424c:	f001 fc5c 	bl	8005b08 <pvPortMalloc>
 8004250:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00e      	beq.n	8004276 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004258:	20bc      	movs	r0, #188	; 0xbc
 800425a:	f001 fc55 	bl	8005b08 <pvPortMalloc>
 800425e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
 800426c:	e005      	b.n	800427a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800426e:	6978      	ldr	r0, [r7, #20]
 8004270:	f001 fd16 	bl	8005ca0 <vPortFree>
 8004274:	e001      	b.n	800427a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004276:	2300      	movs	r3, #0
 8004278:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d017      	beq.n	80042b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004288:	88fa      	ldrh	r2, [r7, #6]
 800428a:	2300      	movs	r3, #0
 800428c:	9303      	str	r3, [sp, #12]
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	9302      	str	r3, [sp, #8]
 8004292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68b9      	ldr	r1, [r7, #8]
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 f80e 	bl	80042c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042a4:	69f8      	ldr	r0, [r7, #28]
 80042a6:	f000 f8b1 	bl	800440c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80042aa:	2301      	movs	r3, #1
 80042ac:	61bb      	str	r3, [r7, #24]
 80042ae:	e002      	b.n	80042b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042b0:	f04f 33ff 	mov.w	r3, #4294967295
 80042b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80042b6:	69bb      	ldr	r3, [r7, #24]
	}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3720      	adds	r7, #32
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b088      	sub	sp, #32
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
 80042cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80042ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	461a      	mov	r2, r3
 80042d8:	21a5      	movs	r1, #165	; 0xa5
 80042da:	f001 fe33 	bl	8005f44 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042e8:	3b01      	subs	r3, #1
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	f023 0307 	bic.w	r3, r3, #7
 80042f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004306:	f383 8811 	msr	BASEPRI, r3
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	617b      	str	r3, [r7, #20]
}
 8004314:	bf00      	nop
 8004316:	e7fe      	b.n	8004316 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d01f      	beq.n	800435e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	e012      	b.n	800434a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	4413      	add	r3, r2
 800432a:	7819      	ldrb	r1, [r3, #0]
 800432c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	4413      	add	r3, r2
 8004332:	3334      	adds	r3, #52	; 0x34
 8004334:	460a      	mov	r2, r1
 8004336:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	4413      	add	r3, r2
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d006      	beq.n	8004352 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	3301      	adds	r3, #1
 8004348:	61fb      	str	r3, [r7, #28]
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	2b0f      	cmp	r3, #15
 800434e:	d9e9      	bls.n	8004324 <prvInitialiseNewTask+0x64>
 8004350:	e000      	b.n	8004354 <prvInitialiseNewTask+0x94>
			{
				break;
 8004352:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800435c:	e003      	b.n	8004366 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800435e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004368:	2b37      	cmp	r3, #55	; 0x37
 800436a:	d901      	bls.n	8004370 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800436c:	2337      	movs	r3, #55	; 0x37
 800436e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004374:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800437a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800437c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437e:	2200      	movs	r2, #0
 8004380:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004384:	3304      	adds	r3, #4
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff f978 	bl	800367c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800438c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438e:	3318      	adds	r3, #24
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff f973 	bl	800367c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800439a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80043ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ae:	2200      	movs	r2, #0
 80043b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80043bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043be:	3354      	adds	r3, #84	; 0x54
 80043c0:	2260      	movs	r2, #96	; 0x60
 80043c2:	2100      	movs	r1, #0
 80043c4:	4618      	mov	r0, r3
 80043c6:	f001 fdbd 	bl	8005f44 <memset>
 80043ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043cc:	4a0c      	ldr	r2, [pc, #48]	; (8004400 <prvInitialiseNewTask+0x140>)
 80043ce:	659a      	str	r2, [r3, #88]	; 0x58
 80043d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d2:	4a0c      	ldr	r2, [pc, #48]	; (8004404 <prvInitialiseNewTask+0x144>)
 80043d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	4a0b      	ldr	r2, [pc, #44]	; (8004408 <prvInitialiseNewTask+0x148>)
 80043da:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	68f9      	ldr	r1, [r7, #12]
 80043e0:	69b8      	ldr	r0, [r7, #24]
 80043e2:	f001 f941 	bl	8005668 <pxPortInitialiseStack>
 80043e6:	4602      	mov	r2, r0
 80043e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80043ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043f8:	bf00      	nop
 80043fa:	3720      	adds	r7, #32
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	080061d0 	.word	0x080061d0
 8004404:	080061f0 	.word	0x080061f0
 8004408:	080061b0 	.word	0x080061b0

0800440c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004414:	f001 fa56 	bl	80058c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004418:	4b2d      	ldr	r3, [pc, #180]	; (80044d0 <prvAddNewTaskToReadyList+0xc4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3301      	adds	r3, #1
 800441e:	4a2c      	ldr	r2, [pc, #176]	; (80044d0 <prvAddNewTaskToReadyList+0xc4>)
 8004420:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004422:	4b2c      	ldr	r3, [pc, #176]	; (80044d4 <prvAddNewTaskToReadyList+0xc8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d109      	bne.n	800443e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800442a:	4a2a      	ldr	r2, [pc, #168]	; (80044d4 <prvAddNewTaskToReadyList+0xc8>)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004430:	4b27      	ldr	r3, [pc, #156]	; (80044d0 <prvAddNewTaskToReadyList+0xc4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d110      	bne.n	800445a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004438:	f000 fc26 	bl	8004c88 <prvInitialiseTaskLists>
 800443c:	e00d      	b.n	800445a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800443e:	4b26      	ldr	r3, [pc, #152]	; (80044d8 <prvAddNewTaskToReadyList+0xcc>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d109      	bne.n	800445a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004446:	4b23      	ldr	r3, [pc, #140]	; (80044d4 <prvAddNewTaskToReadyList+0xc8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	429a      	cmp	r2, r3
 8004452:	d802      	bhi.n	800445a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004454:	4a1f      	ldr	r2, [pc, #124]	; (80044d4 <prvAddNewTaskToReadyList+0xc8>)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800445a:	4b20      	ldr	r3, [pc, #128]	; (80044dc <prvAddNewTaskToReadyList+0xd0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3301      	adds	r3, #1
 8004460:	4a1e      	ldr	r2, [pc, #120]	; (80044dc <prvAddNewTaskToReadyList+0xd0>)
 8004462:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004464:	4b1d      	ldr	r3, [pc, #116]	; (80044dc <prvAddNewTaskToReadyList+0xd0>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004470:	4b1b      	ldr	r3, [pc, #108]	; (80044e0 <prvAddNewTaskToReadyList+0xd4>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d903      	bls.n	8004480 <prvAddNewTaskToReadyList+0x74>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	4a18      	ldr	r2, [pc, #96]	; (80044e0 <prvAddNewTaskToReadyList+0xd4>)
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004484:	4613      	mov	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4a15      	ldr	r2, [pc, #84]	; (80044e4 <prvAddNewTaskToReadyList+0xd8>)
 800448e:	441a      	add	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3304      	adds	r3, #4
 8004494:	4619      	mov	r1, r3
 8004496:	4610      	mov	r0, r2
 8004498:	f7ff f8fd 	bl	8003696 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800449c:	f001 fa42 	bl	8005924 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80044a0:	4b0d      	ldr	r3, [pc, #52]	; (80044d8 <prvAddNewTaskToReadyList+0xcc>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00e      	beq.n	80044c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80044a8:	4b0a      	ldr	r3, [pc, #40]	; (80044d4 <prvAddNewTaskToReadyList+0xc8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d207      	bcs.n	80044c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80044b6:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <prvAddNewTaskToReadyList+0xdc>)
 80044b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000de0 	.word	0x20000de0
 80044d4:	2000090c 	.word	0x2000090c
 80044d8:	20000dec 	.word	0x20000dec
 80044dc:	20000dfc 	.word	0x20000dfc
 80044e0:	20000de8 	.word	0x20000de8
 80044e4:	20000910 	.word	0x20000910
 80044e8:	e000ed04 	.word	0xe000ed04

080044ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d017      	beq.n	800452e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80044fe:	4b13      	ldr	r3, [pc, #76]	; (800454c <vTaskDelay+0x60>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <vTaskDelay+0x30>
	__asm volatile
 8004506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	60bb      	str	r3, [r7, #8]
}
 8004518:	bf00      	nop
 800451a:	e7fe      	b.n	800451a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800451c:	f000 f88a 	bl	8004634 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004520:	2100      	movs	r1, #0
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fcfe 	bl	8004f24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004528:	f000 f892 	bl	8004650 <xTaskResumeAll>
 800452c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d107      	bne.n	8004544 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004534:	4b06      	ldr	r3, [pc, #24]	; (8004550 <vTaskDelay+0x64>)
 8004536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004544:	bf00      	nop
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	20000e08 	.word	0x20000e08
 8004550:	e000ed04 	.word	0xe000ed04

08004554 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b08a      	sub	sp, #40	; 0x28
 8004558:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800455a:	2300      	movs	r3, #0
 800455c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800455e:	2300      	movs	r3, #0
 8004560:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004562:	463a      	mov	r2, r7
 8004564:	1d39      	adds	r1, r7, #4
 8004566:	f107 0308 	add.w	r3, r7, #8
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff f832 	bl	80035d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004570:	6839      	ldr	r1, [r7, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	9202      	str	r2, [sp, #8]
 8004578:	9301      	str	r3, [sp, #4]
 800457a:	2300      	movs	r3, #0
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	2300      	movs	r3, #0
 8004580:	460a      	mov	r2, r1
 8004582:	4924      	ldr	r1, [pc, #144]	; (8004614 <vTaskStartScheduler+0xc0>)
 8004584:	4824      	ldr	r0, [pc, #144]	; (8004618 <vTaskStartScheduler+0xc4>)
 8004586:	f7ff fdf9 	bl	800417c <xTaskCreateStatic>
 800458a:	4603      	mov	r3, r0
 800458c:	4a23      	ldr	r2, [pc, #140]	; (800461c <vTaskStartScheduler+0xc8>)
 800458e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004590:	4b22      	ldr	r3, [pc, #136]	; (800461c <vTaskStartScheduler+0xc8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d002      	beq.n	800459e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004598:	2301      	movs	r3, #1
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	e001      	b.n	80045a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800459e:	2300      	movs	r3, #0
 80045a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d102      	bne.n	80045ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80045a8:	f000 fd10 	bl	8004fcc <xTimerCreateTimerTask>
 80045ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d11b      	bne.n	80045ec <vTaskStartScheduler+0x98>
	__asm volatile
 80045b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	613b      	str	r3, [r7, #16]
}
 80045c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80045c8:	4b15      	ldr	r3, [pc, #84]	; (8004620 <vTaskStartScheduler+0xcc>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3354      	adds	r3, #84	; 0x54
 80045ce:	4a15      	ldr	r2, [pc, #84]	; (8004624 <vTaskStartScheduler+0xd0>)
 80045d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80045d2:	4b15      	ldr	r3, [pc, #84]	; (8004628 <vTaskStartScheduler+0xd4>)
 80045d4:	f04f 32ff 	mov.w	r2, #4294967295
 80045d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80045da:	4b14      	ldr	r3, [pc, #80]	; (800462c <vTaskStartScheduler+0xd8>)
 80045dc:	2201      	movs	r2, #1
 80045de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80045e0:	4b13      	ldr	r3, [pc, #76]	; (8004630 <vTaskStartScheduler+0xdc>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80045e6:	f001 f8cb 	bl	8005780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80045ea:	e00e      	b.n	800460a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f2:	d10a      	bne.n	800460a <vTaskStartScheduler+0xb6>
	__asm volatile
 80045f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	60fb      	str	r3, [r7, #12]
}
 8004606:	bf00      	nop
 8004608:	e7fe      	b.n	8004608 <vTaskStartScheduler+0xb4>
}
 800460a:	bf00      	nop
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	08006114 	.word	0x08006114
 8004618:	08004c59 	.word	0x08004c59
 800461c:	20000e04 	.word	0x20000e04
 8004620:	2000090c 	.word	0x2000090c
 8004624:	20000030 	.word	0x20000030
 8004628:	20000e00 	.word	0x20000e00
 800462c:	20000dec 	.word	0x20000dec
 8004630:	20000de4 	.word	0x20000de4

08004634 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004638:	4b04      	ldr	r3, [pc, #16]	; (800464c <vTaskSuspendAll+0x18>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	3301      	adds	r3, #1
 800463e:	4a03      	ldr	r2, [pc, #12]	; (800464c <vTaskSuspendAll+0x18>)
 8004640:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004642:	bf00      	nop
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	20000e08 	.word	0x20000e08

08004650 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004656:	2300      	movs	r3, #0
 8004658:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800465a:	2300      	movs	r3, #0
 800465c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800465e:	4b42      	ldr	r3, [pc, #264]	; (8004768 <xTaskResumeAll+0x118>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10a      	bne.n	800467c <xTaskResumeAll+0x2c>
	__asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	603b      	str	r3, [r7, #0]
}
 8004678:	bf00      	nop
 800467a:	e7fe      	b.n	800467a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800467c:	f001 f922 	bl	80058c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004680:	4b39      	ldr	r3, [pc, #228]	; (8004768 <xTaskResumeAll+0x118>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3b01      	subs	r3, #1
 8004686:	4a38      	ldr	r2, [pc, #224]	; (8004768 <xTaskResumeAll+0x118>)
 8004688:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800468a:	4b37      	ldr	r3, [pc, #220]	; (8004768 <xTaskResumeAll+0x118>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d162      	bne.n	8004758 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004692:	4b36      	ldr	r3, [pc, #216]	; (800476c <xTaskResumeAll+0x11c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d05e      	beq.n	8004758 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800469a:	e02f      	b.n	80046fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800469c:	4b34      	ldr	r3, [pc, #208]	; (8004770 <xTaskResumeAll+0x120>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3318      	adds	r3, #24
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff f851 	bl	8003750 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3304      	adds	r3, #4
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff f84c 	bl	8003750 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046bc:	4b2d      	ldr	r3, [pc, #180]	; (8004774 <xTaskResumeAll+0x124>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d903      	bls.n	80046cc <xTaskResumeAll+0x7c>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	4a2a      	ldr	r2, [pc, #168]	; (8004774 <xTaskResumeAll+0x124>)
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d0:	4613      	mov	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4a27      	ldr	r2, [pc, #156]	; (8004778 <xTaskResumeAll+0x128>)
 80046da:	441a      	add	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	3304      	adds	r3, #4
 80046e0:	4619      	mov	r1, r3
 80046e2:	4610      	mov	r0, r2
 80046e4:	f7fe ffd7 	bl	8003696 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ec:	4b23      	ldr	r3, [pc, #140]	; (800477c <xTaskResumeAll+0x12c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d302      	bcc.n	80046fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80046f6:	4b22      	ldr	r3, [pc, #136]	; (8004780 <xTaskResumeAll+0x130>)
 80046f8:	2201      	movs	r2, #1
 80046fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046fc:	4b1c      	ldr	r3, [pc, #112]	; (8004770 <xTaskResumeAll+0x120>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1cb      	bne.n	800469c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800470a:	f000 fb5f 	bl	8004dcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800470e:	4b1d      	ldr	r3, [pc, #116]	; (8004784 <xTaskResumeAll+0x134>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d010      	beq.n	800473c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800471a:	f000 f847 	bl	80047ac <xTaskIncrementTick>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004724:	4b16      	ldr	r3, [pc, #88]	; (8004780 <xTaskResumeAll+0x130>)
 8004726:	2201      	movs	r2, #1
 8004728:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3b01      	subs	r3, #1
 800472e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f1      	bne.n	800471a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004736:	4b13      	ldr	r3, [pc, #76]	; (8004784 <xTaskResumeAll+0x134>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800473c:	4b10      	ldr	r3, [pc, #64]	; (8004780 <xTaskResumeAll+0x130>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d009      	beq.n	8004758 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004744:	2301      	movs	r3, #1
 8004746:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004748:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <xTaskResumeAll+0x138>)
 800474a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004758:	f001 f8e4 	bl	8005924 <vPortExitCritical>

	return xAlreadyYielded;
 800475c:	68bb      	ldr	r3, [r7, #8]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20000e08 	.word	0x20000e08
 800476c:	20000de0 	.word	0x20000de0
 8004770:	20000da0 	.word	0x20000da0
 8004774:	20000de8 	.word	0x20000de8
 8004778:	20000910 	.word	0x20000910
 800477c:	2000090c 	.word	0x2000090c
 8004780:	20000df4 	.word	0x20000df4
 8004784:	20000df0 	.word	0x20000df0
 8004788:	e000ed04 	.word	0xe000ed04

0800478c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004792:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <xTaskGetTickCount+0x1c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004798:	687b      	ldr	r3, [r7, #4]
}
 800479a:	4618      	mov	r0, r3
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	20000de4 	.word	0x20000de4

080047ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047b2:	2300      	movs	r3, #0
 80047b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047b6:	4b4f      	ldr	r3, [pc, #316]	; (80048f4 <xTaskIncrementTick+0x148>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f040 808f 	bne.w	80048de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047c0:	4b4d      	ldr	r3, [pc, #308]	; (80048f8 <xTaskIncrementTick+0x14c>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	3301      	adds	r3, #1
 80047c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047c8:	4a4b      	ldr	r2, [pc, #300]	; (80048f8 <xTaskIncrementTick+0x14c>)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d120      	bne.n	8004816 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80047d4:	4b49      	ldr	r3, [pc, #292]	; (80048fc <xTaskIncrementTick+0x150>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	603b      	str	r3, [r7, #0]
}
 80047f0:	bf00      	nop
 80047f2:	e7fe      	b.n	80047f2 <xTaskIncrementTick+0x46>
 80047f4:	4b41      	ldr	r3, [pc, #260]	; (80048fc <xTaskIncrementTick+0x150>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	60fb      	str	r3, [r7, #12]
 80047fa:	4b41      	ldr	r3, [pc, #260]	; (8004900 <xTaskIncrementTick+0x154>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a3f      	ldr	r2, [pc, #252]	; (80048fc <xTaskIncrementTick+0x150>)
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	4a3f      	ldr	r2, [pc, #252]	; (8004900 <xTaskIncrementTick+0x154>)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6013      	str	r3, [r2, #0]
 8004808:	4b3e      	ldr	r3, [pc, #248]	; (8004904 <xTaskIncrementTick+0x158>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3301      	adds	r3, #1
 800480e:	4a3d      	ldr	r2, [pc, #244]	; (8004904 <xTaskIncrementTick+0x158>)
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	f000 fadb 	bl	8004dcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004816:	4b3c      	ldr	r3, [pc, #240]	; (8004908 <xTaskIncrementTick+0x15c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	429a      	cmp	r2, r3
 800481e:	d349      	bcc.n	80048b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004820:	4b36      	ldr	r3, [pc, #216]	; (80048fc <xTaskIncrementTick+0x150>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d104      	bne.n	8004834 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800482a:	4b37      	ldr	r3, [pc, #220]	; (8004908 <xTaskIncrementTick+0x15c>)
 800482c:	f04f 32ff 	mov.w	r2, #4294967295
 8004830:	601a      	str	r2, [r3, #0]
					break;
 8004832:	e03f      	b.n	80048b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004834:	4b31      	ldr	r3, [pc, #196]	; (80048fc <xTaskIncrementTick+0x150>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	429a      	cmp	r2, r3
 800484a:	d203      	bcs.n	8004854 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800484c:	4a2e      	ldr	r2, [pc, #184]	; (8004908 <xTaskIncrementTick+0x15c>)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004852:	e02f      	b.n	80048b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	3304      	adds	r3, #4
 8004858:	4618      	mov	r0, r3
 800485a:	f7fe ff79 	bl	8003750 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004862:	2b00      	cmp	r3, #0
 8004864:	d004      	beq.n	8004870 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	3318      	adds	r3, #24
 800486a:	4618      	mov	r0, r3
 800486c:	f7fe ff70 	bl	8003750 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004874:	4b25      	ldr	r3, [pc, #148]	; (800490c <xTaskIncrementTick+0x160>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d903      	bls.n	8004884 <xTaskIncrementTick+0xd8>
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	4a22      	ldr	r2, [pc, #136]	; (800490c <xTaskIncrementTick+0x160>)
 8004882:	6013      	str	r3, [r2, #0]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004888:	4613      	mov	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4a1f      	ldr	r2, [pc, #124]	; (8004910 <xTaskIncrementTick+0x164>)
 8004892:	441a      	add	r2, r3
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	3304      	adds	r3, #4
 8004898:	4619      	mov	r1, r3
 800489a:	4610      	mov	r0, r2
 800489c:	f7fe fefb 	bl	8003696 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a4:	4b1b      	ldr	r3, [pc, #108]	; (8004914 <xTaskIncrementTick+0x168>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d3b8      	bcc.n	8004820 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80048ae:	2301      	movs	r3, #1
 80048b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048b2:	e7b5      	b.n	8004820 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048b4:	4b17      	ldr	r3, [pc, #92]	; (8004914 <xTaskIncrementTick+0x168>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ba:	4915      	ldr	r1, [pc, #84]	; (8004910 <xTaskIncrementTick+0x164>)
 80048bc:	4613      	mov	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d901      	bls.n	80048d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80048cc:	2301      	movs	r3, #1
 80048ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80048d0:	4b11      	ldr	r3, [pc, #68]	; (8004918 <xTaskIncrementTick+0x16c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d007      	beq.n	80048e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80048d8:	2301      	movs	r3, #1
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	e004      	b.n	80048e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80048de:	4b0f      	ldr	r3, [pc, #60]	; (800491c <xTaskIncrementTick+0x170>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3301      	adds	r3, #1
 80048e4:	4a0d      	ldr	r2, [pc, #52]	; (800491c <xTaskIncrementTick+0x170>)
 80048e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80048e8:	697b      	ldr	r3, [r7, #20]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20000e08 	.word	0x20000e08
 80048f8:	20000de4 	.word	0x20000de4
 80048fc:	20000d98 	.word	0x20000d98
 8004900:	20000d9c 	.word	0x20000d9c
 8004904:	20000df8 	.word	0x20000df8
 8004908:	20000e00 	.word	0x20000e00
 800490c:	20000de8 	.word	0x20000de8
 8004910:	20000910 	.word	0x20000910
 8004914:	2000090c 	.word	0x2000090c
 8004918:	20000df4 	.word	0x20000df4
 800491c:	20000df0 	.word	0x20000df0

08004920 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004926:	4b2a      	ldr	r3, [pc, #168]	; (80049d0 <vTaskSwitchContext+0xb0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800492e:	4b29      	ldr	r3, [pc, #164]	; (80049d4 <vTaskSwitchContext+0xb4>)
 8004930:	2201      	movs	r2, #1
 8004932:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004934:	e046      	b.n	80049c4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004936:	4b27      	ldr	r3, [pc, #156]	; (80049d4 <vTaskSwitchContext+0xb4>)
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800493c:	4b26      	ldr	r3, [pc, #152]	; (80049d8 <vTaskSwitchContext+0xb8>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	e010      	b.n	8004966 <vTaskSwitchContext+0x46>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10a      	bne.n	8004960 <vTaskSwitchContext+0x40>
	__asm volatile
 800494a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494e:	f383 8811 	msr	BASEPRI, r3
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	607b      	str	r3, [r7, #4]
}
 800495c:	bf00      	nop
 800495e:	e7fe      	b.n	800495e <vTaskSwitchContext+0x3e>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	3b01      	subs	r3, #1
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	491d      	ldr	r1, [pc, #116]	; (80049dc <vTaskSwitchContext+0xbc>)
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	440b      	add	r3, r1
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0e4      	beq.n	8004944 <vTaskSwitchContext+0x24>
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4a15      	ldr	r2, [pc, #84]	; (80049dc <vTaskSwitchContext+0xbc>)
 8004986:	4413      	add	r3, r2
 8004988:	60bb      	str	r3, [r7, #8]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	605a      	str	r2, [r3, #4]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	3308      	adds	r3, #8
 800499c:	429a      	cmp	r2, r3
 800499e:	d104      	bne.n	80049aa <vTaskSwitchContext+0x8a>
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	605a      	str	r2, [r3, #4]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	4a0b      	ldr	r2, [pc, #44]	; (80049e0 <vTaskSwitchContext+0xc0>)
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	4a08      	ldr	r2, [pc, #32]	; (80049d8 <vTaskSwitchContext+0xb8>)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80049ba:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <vTaskSwitchContext+0xc0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3354      	adds	r3, #84	; 0x54
 80049c0:	4a08      	ldr	r2, [pc, #32]	; (80049e4 <vTaskSwitchContext+0xc4>)
 80049c2:	6013      	str	r3, [r2, #0]
}
 80049c4:	bf00      	nop
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	20000e08 	.word	0x20000e08
 80049d4:	20000df4 	.word	0x20000df4
 80049d8:	20000de8 	.word	0x20000de8
 80049dc:	20000910 	.word	0x20000910
 80049e0:	2000090c 	.word	0x2000090c
 80049e4:	20000030 	.word	0x20000030

080049e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10a      	bne.n	8004a0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	60fb      	str	r3, [r7, #12]
}
 8004a0a:	bf00      	nop
 8004a0c:	e7fe      	b.n	8004a0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a0e:	4b07      	ldr	r3, [pc, #28]	; (8004a2c <vTaskPlaceOnEventList+0x44>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3318      	adds	r3, #24
 8004a14:	4619      	mov	r1, r3
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fe fe61 	bl	80036de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	6838      	ldr	r0, [r7, #0]
 8004a20:	f000 fa80 	bl	8004f24 <prvAddCurrentTaskToDelayedList>
}
 8004a24:	bf00      	nop
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	2000090c 	.word	0x2000090c

08004a30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10a      	bne.n	8004a58 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	617b      	str	r3, [r7, #20]
}
 8004a54:	bf00      	nop
 8004a56:	e7fe      	b.n	8004a56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a58:	4b0a      	ldr	r3, [pc, #40]	; (8004a84 <vTaskPlaceOnEventListRestricted+0x54>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3318      	adds	r3, #24
 8004a5e:	4619      	mov	r1, r3
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f7fe fe18 	bl	8003696 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d002      	beq.n	8004a72 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a70:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	68b8      	ldr	r0, [r7, #8]
 8004a76:	f000 fa55 	bl	8004f24 <prvAddCurrentTaskToDelayedList>
	}
 8004a7a:	bf00      	nop
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	2000090c 	.word	0x2000090c

08004a88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10a      	bne.n	8004ab4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	60fb      	str	r3, [r7, #12]
}
 8004ab0:	bf00      	nop
 8004ab2:	e7fe      	b.n	8004ab2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	3318      	adds	r3, #24
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fe fe49 	bl	8003750 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004abe:	4b1e      	ldr	r3, [pc, #120]	; (8004b38 <xTaskRemoveFromEventList+0xb0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d11d      	bne.n	8004b02 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe fe40 	bl	8003750 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad4:	4b19      	ldr	r3, [pc, #100]	; (8004b3c <xTaskRemoveFromEventList+0xb4>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d903      	bls.n	8004ae4 <xTaskRemoveFromEventList+0x5c>
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	4a16      	ldr	r2, [pc, #88]	; (8004b3c <xTaskRemoveFromEventList+0xb4>)
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae8:	4613      	mov	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4a13      	ldr	r2, [pc, #76]	; (8004b40 <xTaskRemoveFromEventList+0xb8>)
 8004af2:	441a      	add	r2, r3
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	3304      	adds	r3, #4
 8004af8:	4619      	mov	r1, r3
 8004afa:	4610      	mov	r0, r2
 8004afc:	f7fe fdcb 	bl	8003696 <vListInsertEnd>
 8004b00:	e005      	b.n	8004b0e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	3318      	adds	r3, #24
 8004b06:	4619      	mov	r1, r3
 8004b08:	480e      	ldr	r0, [pc, #56]	; (8004b44 <xTaskRemoveFromEventList+0xbc>)
 8004b0a:	f7fe fdc4 	bl	8003696 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b12:	4b0d      	ldr	r3, [pc, #52]	; (8004b48 <xTaskRemoveFromEventList+0xc0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d905      	bls.n	8004b28 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b20:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <xTaskRemoveFromEventList+0xc4>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	e001      	b.n	8004b2c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004b2c:	697b      	ldr	r3, [r7, #20]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20000e08 	.word	0x20000e08
 8004b3c:	20000de8 	.word	0x20000de8
 8004b40:	20000910 	.word	0x20000910
 8004b44:	20000da0 	.word	0x20000da0
 8004b48:	2000090c 	.word	0x2000090c
 8004b4c:	20000df4 	.word	0x20000df4

08004b50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b58:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <vTaskInternalSetTimeOutState+0x24>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b60:	4b05      	ldr	r3, [pc, #20]	; (8004b78 <vTaskInternalSetTimeOutState+0x28>)
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	605a      	str	r2, [r3, #4]
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	20000df8 	.word	0x20000df8
 8004b78:	20000de4 	.word	0x20000de4

08004b7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b088      	sub	sp, #32
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10a      	bne.n	8004ba2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	613b      	str	r3, [r7, #16]
}
 8004b9e:	bf00      	nop
 8004ba0:	e7fe      	b.n	8004ba0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10a      	bne.n	8004bbe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	60fb      	str	r3, [r7, #12]
}
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004bbe:	f000 fe81 	bl	80058c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004bc2:	4b1d      	ldr	r3, [pc, #116]	; (8004c38 <xTaskCheckForTimeOut+0xbc>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bda:	d102      	bne.n	8004be2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	61fb      	str	r3, [r7, #28]
 8004be0:	e023      	b.n	8004c2a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	4b15      	ldr	r3, [pc, #84]	; (8004c3c <xTaskCheckForTimeOut+0xc0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d007      	beq.n	8004bfe <xTaskCheckForTimeOut+0x82>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d302      	bcc.n	8004bfe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	61fb      	str	r3, [r7, #28]
 8004bfc:	e015      	b.n	8004c2a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d20b      	bcs.n	8004c20 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	1ad2      	subs	r2, r2, r3
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff ff9b 	bl	8004b50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	61fb      	str	r3, [r7, #28]
 8004c1e:	e004      	b.n	8004c2a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c26:	2301      	movs	r3, #1
 8004c28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c2a:	f000 fe7b 	bl	8005924 <vPortExitCritical>

	return xReturn;
 8004c2e:	69fb      	ldr	r3, [r7, #28]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3720      	adds	r7, #32
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	20000de4 	.word	0x20000de4
 8004c3c:	20000df8 	.word	0x20000df8

08004c40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004c44:	4b03      	ldr	r3, [pc, #12]	; (8004c54 <vTaskMissedYield+0x14>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
}
 8004c4a:	bf00      	nop
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	20000df4 	.word	0x20000df4

08004c58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c60:	f000 f852 	bl	8004d08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c64:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <prvIdleTask+0x28>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d9f9      	bls.n	8004c60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c6c:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <prvIdleTask+0x2c>)
 8004c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c7c:	e7f0      	b.n	8004c60 <prvIdleTask+0x8>
 8004c7e:	bf00      	nop
 8004c80:	20000910 	.word	0x20000910
 8004c84:	e000ed04 	.word	0xe000ed04

08004c88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c8e:	2300      	movs	r3, #0
 8004c90:	607b      	str	r3, [r7, #4]
 8004c92:	e00c      	b.n	8004cae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	4613      	mov	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4a12      	ldr	r2, [pc, #72]	; (8004ce8 <prvInitialiseTaskLists+0x60>)
 8004ca0:	4413      	add	r3, r2
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fe fcca 	bl	800363c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3301      	adds	r3, #1
 8004cac:	607b      	str	r3, [r7, #4]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b37      	cmp	r3, #55	; 0x37
 8004cb2:	d9ef      	bls.n	8004c94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004cb4:	480d      	ldr	r0, [pc, #52]	; (8004cec <prvInitialiseTaskLists+0x64>)
 8004cb6:	f7fe fcc1 	bl	800363c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004cba:	480d      	ldr	r0, [pc, #52]	; (8004cf0 <prvInitialiseTaskLists+0x68>)
 8004cbc:	f7fe fcbe 	bl	800363c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004cc0:	480c      	ldr	r0, [pc, #48]	; (8004cf4 <prvInitialiseTaskLists+0x6c>)
 8004cc2:	f7fe fcbb 	bl	800363c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004cc6:	480c      	ldr	r0, [pc, #48]	; (8004cf8 <prvInitialiseTaskLists+0x70>)
 8004cc8:	f7fe fcb8 	bl	800363c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ccc:	480b      	ldr	r0, [pc, #44]	; (8004cfc <prvInitialiseTaskLists+0x74>)
 8004cce:	f7fe fcb5 	bl	800363c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004cd2:	4b0b      	ldr	r3, [pc, #44]	; (8004d00 <prvInitialiseTaskLists+0x78>)
 8004cd4:	4a05      	ldr	r2, [pc, #20]	; (8004cec <prvInitialiseTaskLists+0x64>)
 8004cd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <prvInitialiseTaskLists+0x7c>)
 8004cda:	4a05      	ldr	r2, [pc, #20]	; (8004cf0 <prvInitialiseTaskLists+0x68>)
 8004cdc:	601a      	str	r2, [r3, #0]
}
 8004cde:	bf00      	nop
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20000910 	.word	0x20000910
 8004cec:	20000d70 	.word	0x20000d70
 8004cf0:	20000d84 	.word	0x20000d84
 8004cf4:	20000da0 	.word	0x20000da0
 8004cf8:	20000db4 	.word	0x20000db4
 8004cfc:	20000dcc 	.word	0x20000dcc
 8004d00:	20000d98 	.word	0x20000d98
 8004d04:	20000d9c 	.word	0x20000d9c

08004d08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d0e:	e019      	b.n	8004d44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d10:	f000 fdd8 	bl	80058c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d14:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <prvCheckTasksWaitingTermination+0x50>)
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7fe fd15 	bl	8003750 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d26:	4b0d      	ldr	r3, [pc, #52]	; (8004d5c <prvCheckTasksWaitingTermination+0x54>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	4a0b      	ldr	r2, [pc, #44]	; (8004d5c <prvCheckTasksWaitingTermination+0x54>)
 8004d2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d30:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <prvCheckTasksWaitingTermination+0x58>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3b01      	subs	r3, #1
 8004d36:	4a0a      	ldr	r2, [pc, #40]	; (8004d60 <prvCheckTasksWaitingTermination+0x58>)
 8004d38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d3a:	f000 fdf3 	bl	8005924 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f810 	bl	8004d64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d44:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <prvCheckTasksWaitingTermination+0x58>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e1      	bne.n	8004d10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d4c:	bf00      	nop
 8004d4e:	bf00      	nop
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20000db4 	.word	0x20000db4
 8004d5c:	20000de0 	.word	0x20000de0
 8004d60:	20000dc8 	.word	0x20000dc8

08004d64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3354      	adds	r3, #84	; 0x54
 8004d70:	4618      	mov	r0, r3
 8004d72:	f001 f8fd 	bl	8005f70 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d108      	bne.n	8004d92 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 ff8b 	bl	8005ca0 <vPortFree>
				vPortFree( pxTCB );
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 ff88 	bl	8005ca0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d90:	e018      	b.n	8004dc4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d103      	bne.n	8004da4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 ff7f 	bl	8005ca0 <vPortFree>
	}
 8004da2:	e00f      	b.n	8004dc4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d00a      	beq.n	8004dc4 <prvDeleteTCB+0x60>
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	60fb      	str	r3, [r7, #12]
}
 8004dc0:	bf00      	nop
 8004dc2:	e7fe      	b.n	8004dc2 <prvDeleteTCB+0x5e>
	}
 8004dc4:	bf00      	nop
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dd2:	4b0c      	ldr	r3, [pc, #48]	; (8004e04 <prvResetNextTaskUnblockTime+0x38>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d104      	bne.n	8004de6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ddc:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <prvResetNextTaskUnblockTime+0x3c>)
 8004dde:	f04f 32ff 	mov.w	r2, #4294967295
 8004de2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004de4:	e008      	b.n	8004df8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004de6:	4b07      	ldr	r3, [pc, #28]	; (8004e04 <prvResetNextTaskUnblockTime+0x38>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	4a04      	ldr	r2, [pc, #16]	; (8004e08 <prvResetNextTaskUnblockTime+0x3c>)
 8004df6:	6013      	str	r3, [r2, #0]
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	20000d98 	.word	0x20000d98
 8004e08:	20000e00 	.word	0x20000e00

08004e0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e12:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <xTaskGetSchedulerState+0x34>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d102      	bne.n	8004e20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	607b      	str	r3, [r7, #4]
 8004e1e:	e008      	b.n	8004e32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e20:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <xTaskGetSchedulerState+0x38>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d102      	bne.n	8004e2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e28:	2302      	movs	r3, #2
 8004e2a:	607b      	str	r3, [r7, #4]
 8004e2c:	e001      	b.n	8004e32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e32:	687b      	ldr	r3, [r7, #4]
	}
 8004e34:	4618      	mov	r0, r3
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	20000dec 	.word	0x20000dec
 8004e44:	20000e08 	.word	0x20000e08

08004e48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e54:	2300      	movs	r3, #0
 8004e56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d056      	beq.n	8004f0c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e5e:	4b2e      	ldr	r3, [pc, #184]	; (8004f18 <xTaskPriorityDisinherit+0xd0>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d00a      	beq.n	8004e7e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	60fb      	str	r3, [r7, #12]
}
 8004e7a:	bf00      	nop
 8004e7c:	e7fe      	b.n	8004e7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10a      	bne.n	8004e9c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	60bb      	str	r3, [r7, #8]
}
 8004e98:	bf00      	nop
 8004e9a:	e7fe      	b.n	8004e9a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea0:	1e5a      	subs	r2, r3, #1
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d02c      	beq.n	8004f0c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d128      	bne.n	8004f0c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fe fc46 	bl	8003750 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004edc:	4b0f      	ldr	r3, [pc, #60]	; (8004f1c <xTaskPriorityDisinherit+0xd4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d903      	bls.n	8004eec <xTaskPriorityDisinherit+0xa4>
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee8:	4a0c      	ldr	r2, [pc, #48]	; (8004f1c <xTaskPriorityDisinherit+0xd4>)
 8004eea:	6013      	str	r3, [r2, #0]
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4a09      	ldr	r2, [pc, #36]	; (8004f20 <xTaskPriorityDisinherit+0xd8>)
 8004efa:	441a      	add	r2, r3
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	3304      	adds	r3, #4
 8004f00:	4619      	mov	r1, r3
 8004f02:	4610      	mov	r0, r2
 8004f04:	f7fe fbc7 	bl	8003696 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f0c:	697b      	ldr	r3, [r7, #20]
	}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3718      	adds	r7, #24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	2000090c 	.word	0x2000090c
 8004f1c:	20000de8 	.word	0x20000de8
 8004f20:	20000910 	.word	0x20000910

08004f24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f2e:	4b21      	ldr	r3, [pc, #132]	; (8004fb4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f34:	4b20      	ldr	r3, [pc, #128]	; (8004fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fe fc08 	bl	8003750 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f46:	d10a      	bne.n	8004f5e <prvAddCurrentTaskToDelayedList+0x3a>
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d007      	beq.n	8004f5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f4e:	4b1a      	ldr	r3, [pc, #104]	; (8004fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3304      	adds	r3, #4
 8004f54:	4619      	mov	r1, r3
 8004f56:	4819      	ldr	r0, [pc, #100]	; (8004fbc <prvAddCurrentTaskToDelayedList+0x98>)
 8004f58:	f7fe fb9d 	bl	8003696 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f5c:	e026      	b.n	8004fac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4413      	add	r3, r2
 8004f64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f66:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d209      	bcs.n	8004f8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f76:	4b12      	ldr	r3, [pc, #72]	; (8004fc0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	4619      	mov	r1, r3
 8004f82:	4610      	mov	r0, r2
 8004f84:	f7fe fbab 	bl	80036de <vListInsert>
}
 8004f88:	e010      	b.n	8004fac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f8a:	4b0e      	ldr	r3, [pc, #56]	; (8004fc4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3304      	adds	r3, #4
 8004f94:	4619      	mov	r1, r3
 8004f96:	4610      	mov	r0, r2
 8004f98:	f7fe fba1 	bl	80036de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f9c:	4b0a      	ldr	r3, [pc, #40]	; (8004fc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d202      	bcs.n	8004fac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004fa6:	4a08      	ldr	r2, [pc, #32]	; (8004fc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	6013      	str	r3, [r2, #0]
}
 8004fac:	bf00      	nop
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	20000de4 	.word	0x20000de4
 8004fb8:	2000090c 	.word	0x2000090c
 8004fbc:	20000dcc 	.word	0x20000dcc
 8004fc0:	20000d9c 	.word	0x20000d9c
 8004fc4:	20000d98 	.word	0x20000d98
 8004fc8:	20000e00 	.word	0x20000e00

08004fcc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08a      	sub	sp, #40	; 0x28
 8004fd0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004fd6:	f000 fb07 	bl	80055e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004fda:	4b1c      	ldr	r3, [pc, #112]	; (800504c <xTimerCreateTimerTask+0x80>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d021      	beq.n	8005026 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004fea:	1d3a      	adds	r2, r7, #4
 8004fec:	f107 0108 	add.w	r1, r7, #8
 8004ff0:	f107 030c 	add.w	r3, r7, #12
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fe fb07 	bl	8003608 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	9202      	str	r2, [sp, #8]
 8005002:	9301      	str	r3, [sp, #4]
 8005004:	2302      	movs	r3, #2
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	2300      	movs	r3, #0
 800500a:	460a      	mov	r2, r1
 800500c:	4910      	ldr	r1, [pc, #64]	; (8005050 <xTimerCreateTimerTask+0x84>)
 800500e:	4811      	ldr	r0, [pc, #68]	; (8005054 <xTimerCreateTimerTask+0x88>)
 8005010:	f7ff f8b4 	bl	800417c <xTaskCreateStatic>
 8005014:	4603      	mov	r3, r0
 8005016:	4a10      	ldr	r2, [pc, #64]	; (8005058 <xTimerCreateTimerTask+0x8c>)
 8005018:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800501a:	4b0f      	ldr	r3, [pc, #60]	; (8005058 <xTimerCreateTimerTask+0x8c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005022:	2301      	movs	r3, #1
 8005024:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10a      	bne.n	8005042 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	613b      	str	r3, [r7, #16]
}
 800503e:	bf00      	nop
 8005040:	e7fe      	b.n	8005040 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005042:	697b      	ldr	r3, [r7, #20]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	20000e3c 	.word	0x20000e3c
 8005050:	0800611c 	.word	0x0800611c
 8005054:	08005191 	.word	0x08005191
 8005058:	20000e40 	.word	0x20000e40

0800505c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08a      	sub	sp, #40	; 0x28
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800506a:	2300      	movs	r3, #0
 800506c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10a      	bne.n	800508a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	623b      	str	r3, [r7, #32]
}
 8005086:	bf00      	nop
 8005088:	e7fe      	b.n	8005088 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800508a:	4b1a      	ldr	r3, [pc, #104]	; (80050f4 <xTimerGenericCommand+0x98>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d02a      	beq.n	80050e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2b05      	cmp	r3, #5
 80050a2:	dc18      	bgt.n	80050d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80050a4:	f7ff feb2 	bl	8004e0c <xTaskGetSchedulerState>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d109      	bne.n	80050c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80050ae:	4b11      	ldr	r3, [pc, #68]	; (80050f4 <xTimerGenericCommand+0x98>)
 80050b0:	6818      	ldr	r0, [r3, #0]
 80050b2:	f107 0110 	add.w	r1, r7, #16
 80050b6:	2300      	movs	r3, #0
 80050b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ba:	f7fe fc77 	bl	80039ac <xQueueGenericSend>
 80050be:	6278      	str	r0, [r7, #36]	; 0x24
 80050c0:	e012      	b.n	80050e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80050c2:	4b0c      	ldr	r3, [pc, #48]	; (80050f4 <xTimerGenericCommand+0x98>)
 80050c4:	6818      	ldr	r0, [r3, #0]
 80050c6:	f107 0110 	add.w	r1, r7, #16
 80050ca:	2300      	movs	r3, #0
 80050cc:	2200      	movs	r2, #0
 80050ce:	f7fe fc6d 	bl	80039ac <xQueueGenericSend>
 80050d2:	6278      	str	r0, [r7, #36]	; 0x24
 80050d4:	e008      	b.n	80050e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80050d6:	4b07      	ldr	r3, [pc, #28]	; (80050f4 <xTimerGenericCommand+0x98>)
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	f107 0110 	add.w	r1, r7, #16
 80050de:	2300      	movs	r3, #0
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	f7fe fd61 	bl	8003ba8 <xQueueGenericSendFromISR>
 80050e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3728      	adds	r7, #40	; 0x28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	20000e3c 	.word	0x20000e3c

080050f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b088      	sub	sp, #32
 80050fc:	af02      	add	r7, sp, #8
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005102:	4b22      	ldr	r3, [pc, #136]	; (800518c <prvProcessExpiredTimer+0x94>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	3304      	adds	r3, #4
 8005110:	4618      	mov	r0, r3
 8005112:	f7fe fb1d 	bl	8003750 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b00      	cmp	r3, #0
 8005122:	d022      	beq.n	800516a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	699a      	ldr	r2, [r3, #24]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	18d1      	adds	r1, r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	6978      	ldr	r0, [r7, #20]
 8005132:	f000 f8d1 	bl	80052d8 <prvInsertTimerInActiveList>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01f      	beq.n	800517c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800513c:	2300      	movs	r3, #0
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	2300      	movs	r3, #0
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	2100      	movs	r1, #0
 8005146:	6978      	ldr	r0, [r7, #20]
 8005148:	f7ff ff88 	bl	800505c <xTimerGenericCommand>
 800514c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d113      	bne.n	800517c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	60fb      	str	r3, [r7, #12]
}
 8005166:	bf00      	nop
 8005168:	e7fe      	b.n	8005168 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005170:	f023 0301 	bic.w	r3, r3, #1
 8005174:	b2da      	uxtb	r2, r3
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	6978      	ldr	r0, [r7, #20]
 8005182:	4798      	blx	r3
}
 8005184:	bf00      	nop
 8005186:	3718      	adds	r7, #24
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	20000e34 	.word	0x20000e34

08005190 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005198:	f107 0308 	add.w	r3, r7, #8
 800519c:	4618      	mov	r0, r3
 800519e:	f000 f857 	bl	8005250 <prvGetNextExpireTime>
 80051a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	4619      	mov	r1, r3
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f803 	bl	80051b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80051ae:	f000 f8d5 	bl	800535c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051b2:	e7f1      	b.n	8005198 <prvTimerTask+0x8>

080051b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80051be:	f7ff fa39 	bl	8004634 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051c2:	f107 0308 	add.w	r3, r7, #8
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 f866 	bl	8005298 <prvSampleTimeNow>
 80051cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d130      	bne.n	8005236 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10a      	bne.n	80051f0 <prvProcessTimerOrBlockTask+0x3c>
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d806      	bhi.n	80051f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80051e2:	f7ff fa35 	bl	8004650 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80051e6:	68f9      	ldr	r1, [r7, #12]
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7ff ff85 	bl	80050f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80051ee:	e024      	b.n	800523a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d008      	beq.n	8005208 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80051f6:	4b13      	ldr	r3, [pc, #76]	; (8005244 <prvProcessTimerOrBlockTask+0x90>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <prvProcessTimerOrBlockTask+0x50>
 8005200:	2301      	movs	r3, #1
 8005202:	e000      	b.n	8005206 <prvProcessTimerOrBlockTask+0x52>
 8005204:	2300      	movs	r3, #0
 8005206:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005208:	4b0f      	ldr	r3, [pc, #60]	; (8005248 <prvProcessTimerOrBlockTask+0x94>)
 800520a:	6818      	ldr	r0, [r3, #0]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	4619      	mov	r1, r3
 8005216:	f7fe ff7d 	bl	8004114 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800521a:	f7ff fa19 	bl	8004650 <xTaskResumeAll>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10a      	bne.n	800523a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005224:	4b09      	ldr	r3, [pc, #36]	; (800524c <prvProcessTimerOrBlockTask+0x98>)
 8005226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	f3bf 8f6f 	isb	sy
}
 8005234:	e001      	b.n	800523a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005236:	f7ff fa0b 	bl	8004650 <xTaskResumeAll>
}
 800523a:	bf00      	nop
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	20000e38 	.word	0x20000e38
 8005248:	20000e3c 	.word	0x20000e3c
 800524c:	e000ed04 	.word	0xe000ed04

08005250 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005258:	4b0e      	ldr	r3, [pc, #56]	; (8005294 <prvGetNextExpireTime+0x44>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <prvGetNextExpireTime+0x16>
 8005262:	2201      	movs	r2, #1
 8005264:	e000      	b.n	8005268 <prvGetNextExpireTime+0x18>
 8005266:	2200      	movs	r2, #0
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d105      	bne.n	8005280 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005274:	4b07      	ldr	r3, [pc, #28]	; (8005294 <prvGetNextExpireTime+0x44>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	e001      	b.n	8005284 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005284:	68fb      	ldr	r3, [r7, #12]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	20000e34 	.word	0x20000e34

08005298 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80052a0:	f7ff fa74 	bl	800478c <xTaskGetTickCount>
 80052a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80052a6:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <prvSampleTimeNow+0x3c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d205      	bcs.n	80052bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80052b0:	f000 f936 	bl	8005520 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	e002      	b.n	80052c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80052c2:	4a04      	ldr	r2, [pc, #16]	; (80052d4 <prvSampleTimeNow+0x3c>)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80052c8:	68fb      	ldr	r3, [r7, #12]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	20000e44 	.word	0x20000e44

080052d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
 80052e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80052e6:	2300      	movs	r3, #0
 80052e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d812      	bhi.n	8005324 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	1ad2      	subs	r2, r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	429a      	cmp	r2, r3
 800530a:	d302      	bcc.n	8005312 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800530c:	2301      	movs	r3, #1
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	e01b      	b.n	800534a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005312:	4b10      	ldr	r3, [pc, #64]	; (8005354 <prvInsertTimerInActiveList+0x7c>)
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	3304      	adds	r3, #4
 800531a:	4619      	mov	r1, r3
 800531c:	4610      	mov	r0, r2
 800531e:	f7fe f9de 	bl	80036de <vListInsert>
 8005322:	e012      	b.n	800534a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	429a      	cmp	r2, r3
 800532a:	d206      	bcs.n	800533a <prvInsertTimerInActiveList+0x62>
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	429a      	cmp	r2, r3
 8005332:	d302      	bcc.n	800533a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005334:	2301      	movs	r3, #1
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	e007      	b.n	800534a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800533a:	4b07      	ldr	r3, [pc, #28]	; (8005358 <prvInsertTimerInActiveList+0x80>)
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3304      	adds	r3, #4
 8005342:	4619      	mov	r1, r3
 8005344:	4610      	mov	r0, r2
 8005346:	f7fe f9ca 	bl	80036de <vListInsert>
		}
	}

	return xProcessTimerNow;
 800534a:	697b      	ldr	r3, [r7, #20]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	20000e38 	.word	0x20000e38
 8005358:	20000e34 	.word	0x20000e34

0800535c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08e      	sub	sp, #56	; 0x38
 8005360:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005362:	e0ca      	b.n	80054fa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	da18      	bge.n	800539c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800536a:	1d3b      	adds	r3, r7, #4
 800536c:	3304      	adds	r3, #4
 800536e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10a      	bne.n	800538c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	61fb      	str	r3, [r7, #28]
}
 8005388:	bf00      	nop
 800538a:	e7fe      	b.n	800538a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800538c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005392:	6850      	ldr	r0, [r2, #4]
 8005394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005396:	6892      	ldr	r2, [r2, #8]
 8005398:	4611      	mov	r1, r2
 800539a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f2c0 80aa 	blt.w	80054f8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80053a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d004      	beq.n	80053ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	3304      	adds	r3, #4
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7fe f9cb 	bl	8003750 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053ba:	463b      	mov	r3, r7
 80053bc:	4618      	mov	r0, r3
 80053be:	f7ff ff6b 	bl	8005298 <prvSampleTimeNow>
 80053c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b09      	cmp	r3, #9
 80053c8:	f200 8097 	bhi.w	80054fa <prvProcessReceivedCommands+0x19e>
 80053cc:	a201      	add	r2, pc, #4	; (adr r2, 80053d4 <prvProcessReceivedCommands+0x78>)
 80053ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d2:	bf00      	nop
 80053d4:	080053fd 	.word	0x080053fd
 80053d8:	080053fd 	.word	0x080053fd
 80053dc:	080053fd 	.word	0x080053fd
 80053e0:	08005471 	.word	0x08005471
 80053e4:	08005485 	.word	0x08005485
 80053e8:	080054cf 	.word	0x080054cf
 80053ec:	080053fd 	.word	0x080053fd
 80053f0:	080053fd 	.word	0x080053fd
 80053f4:	08005471 	.word	0x08005471
 80053f8:	08005485 	.word	0x08005485
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005402:	f043 0301 	orr.w	r3, r3, #1
 8005406:	b2da      	uxtb	r2, r3
 8005408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	18d1      	adds	r1, r2, r3
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800541a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800541c:	f7ff ff5c 	bl	80052d8 <prvInsertTimerInActiveList>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d069      	beq.n	80054fa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800542c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005434:	f003 0304 	and.w	r3, r3, #4
 8005438:	2b00      	cmp	r3, #0
 800543a:	d05e      	beq.n	80054fa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	441a      	add	r2, r3
 8005444:	2300      	movs	r3, #0
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	2300      	movs	r3, #0
 800544a:	2100      	movs	r1, #0
 800544c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800544e:	f7ff fe05 	bl	800505c <xTimerGenericCommand>
 8005452:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d14f      	bne.n	80054fa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800545a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	61bb      	str	r3, [r7, #24]
}
 800546c:	bf00      	nop
 800546e:	e7fe      	b.n	800546e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005476:	f023 0301 	bic.w	r3, r3, #1
 800547a:	b2da      	uxtb	r2, r3
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005482:	e03a      	b.n	80054fa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005486:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	b2da      	uxtb	r2, r3
 8005490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800549c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10a      	bne.n	80054ba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	617b      	str	r3, [r7, #20]
}
 80054b6:	bf00      	nop
 80054b8:	e7fe      	b.n	80054b8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80054ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054bc:	699a      	ldr	r2, [r3, #24]
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	18d1      	adds	r1, r2, r3
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054c8:	f7ff ff06 	bl	80052d8 <prvInsertTimerInActiveList>
					break;
 80054cc:	e015      	b.n	80054fa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80054ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d103      	bne.n	80054e4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80054dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054de:	f000 fbdf 	bl	8005ca0 <vPortFree>
 80054e2:	e00a      	b.n	80054fa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054ea:	f023 0301 	bic.w	r3, r3, #1
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80054f6:	e000      	b.n	80054fa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80054f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054fa:	4b08      	ldr	r3, [pc, #32]	; (800551c <prvProcessReceivedCommands+0x1c0>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	1d39      	adds	r1, r7, #4
 8005500:	2200      	movs	r2, #0
 8005502:	4618      	mov	r0, r3
 8005504:	f7fe fbec 	bl	8003ce0 <xQueueReceive>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	f47f af2a 	bne.w	8005364 <prvProcessReceivedCommands+0x8>
	}
}
 8005510:	bf00      	nop
 8005512:	bf00      	nop
 8005514:	3730      	adds	r7, #48	; 0x30
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20000e3c 	.word	0x20000e3c

08005520 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005526:	e048      	b.n	80055ba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005528:	4b2d      	ldr	r3, [pc, #180]	; (80055e0 <prvSwitchTimerLists+0xc0>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005532:	4b2b      	ldr	r3, [pc, #172]	; (80055e0 <prvSwitchTimerLists+0xc0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	3304      	adds	r3, #4
 8005540:	4618      	mov	r0, r3
 8005542:	f7fe f905 	bl	8003750 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b00      	cmp	r3, #0
 800555a:	d02e      	beq.n	80055ba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	4413      	add	r3, r2
 8005564:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	429a      	cmp	r2, r3
 800556c:	d90e      	bls.n	800558c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800557a:	4b19      	ldr	r3, [pc, #100]	; (80055e0 <prvSwitchTimerLists+0xc0>)
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	3304      	adds	r3, #4
 8005582:	4619      	mov	r1, r3
 8005584:	4610      	mov	r0, r2
 8005586:	f7fe f8aa 	bl	80036de <vListInsert>
 800558a:	e016      	b.n	80055ba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800558c:	2300      	movs	r3, #0
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	2300      	movs	r3, #0
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	2100      	movs	r1, #0
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f7ff fd60 	bl	800505c <xTimerGenericCommand>
 800559c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10a      	bne.n	80055ba <prvSwitchTimerLists+0x9a>
	__asm volatile
 80055a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a8:	f383 8811 	msr	BASEPRI, r3
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	603b      	str	r3, [r7, #0]
}
 80055b6:	bf00      	nop
 80055b8:	e7fe      	b.n	80055b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055ba:	4b09      	ldr	r3, [pc, #36]	; (80055e0 <prvSwitchTimerLists+0xc0>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1b1      	bne.n	8005528 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80055c4:	4b06      	ldr	r3, [pc, #24]	; (80055e0 <prvSwitchTimerLists+0xc0>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80055ca:	4b06      	ldr	r3, [pc, #24]	; (80055e4 <prvSwitchTimerLists+0xc4>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a04      	ldr	r2, [pc, #16]	; (80055e0 <prvSwitchTimerLists+0xc0>)
 80055d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80055d2:	4a04      	ldr	r2, [pc, #16]	; (80055e4 <prvSwitchTimerLists+0xc4>)
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	6013      	str	r3, [r2, #0]
}
 80055d8:	bf00      	nop
 80055da:	3718      	adds	r7, #24
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	20000e34 	.word	0x20000e34
 80055e4:	20000e38 	.word	0x20000e38

080055e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80055ee:	f000 f969 	bl	80058c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80055f2:	4b15      	ldr	r3, [pc, #84]	; (8005648 <prvCheckForValidListAndQueue+0x60>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d120      	bne.n	800563c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80055fa:	4814      	ldr	r0, [pc, #80]	; (800564c <prvCheckForValidListAndQueue+0x64>)
 80055fc:	f7fe f81e 	bl	800363c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005600:	4813      	ldr	r0, [pc, #76]	; (8005650 <prvCheckForValidListAndQueue+0x68>)
 8005602:	f7fe f81b 	bl	800363c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005606:	4b13      	ldr	r3, [pc, #76]	; (8005654 <prvCheckForValidListAndQueue+0x6c>)
 8005608:	4a10      	ldr	r2, [pc, #64]	; (800564c <prvCheckForValidListAndQueue+0x64>)
 800560a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800560c:	4b12      	ldr	r3, [pc, #72]	; (8005658 <prvCheckForValidListAndQueue+0x70>)
 800560e:	4a10      	ldr	r2, [pc, #64]	; (8005650 <prvCheckForValidListAndQueue+0x68>)
 8005610:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005612:	2300      	movs	r3, #0
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	4b11      	ldr	r3, [pc, #68]	; (800565c <prvCheckForValidListAndQueue+0x74>)
 8005618:	4a11      	ldr	r2, [pc, #68]	; (8005660 <prvCheckForValidListAndQueue+0x78>)
 800561a:	2110      	movs	r1, #16
 800561c:	200a      	movs	r0, #10
 800561e:	f7fe f929 	bl	8003874 <xQueueGenericCreateStatic>
 8005622:	4603      	mov	r3, r0
 8005624:	4a08      	ldr	r2, [pc, #32]	; (8005648 <prvCheckForValidListAndQueue+0x60>)
 8005626:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005628:	4b07      	ldr	r3, [pc, #28]	; (8005648 <prvCheckForValidListAndQueue+0x60>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005630:	4b05      	ldr	r3, [pc, #20]	; (8005648 <prvCheckForValidListAndQueue+0x60>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	490b      	ldr	r1, [pc, #44]	; (8005664 <prvCheckForValidListAndQueue+0x7c>)
 8005636:	4618      	mov	r0, r3
 8005638:	f7fe fd42 	bl	80040c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800563c:	f000 f972 	bl	8005924 <vPortExitCritical>
}
 8005640:	bf00      	nop
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20000e3c 	.word	0x20000e3c
 800564c:	20000e0c 	.word	0x20000e0c
 8005650:	20000e20 	.word	0x20000e20
 8005654:	20000e34 	.word	0x20000e34
 8005658:	20000e38 	.word	0x20000e38
 800565c:	20000ee8 	.word	0x20000ee8
 8005660:	20000e48 	.word	0x20000e48
 8005664:	08006124 	.word	0x08006124

08005668 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	3b04      	subs	r3, #4
 8005678:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005680:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3b04      	subs	r3, #4
 8005686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f023 0201 	bic.w	r2, r3, #1
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3b04      	subs	r3, #4
 8005696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005698:	4a0c      	ldr	r2, [pc, #48]	; (80056cc <pxPortInitialiseStack+0x64>)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	3b14      	subs	r3, #20
 80056a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	3b04      	subs	r3, #4
 80056ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f06f 0202 	mvn.w	r2, #2
 80056b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3b20      	subs	r3, #32
 80056bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80056be:	68fb      	ldr	r3, [r7, #12]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	080056d1 	.word	0x080056d1

080056d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80056d6:	2300      	movs	r3, #0
 80056d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056da:	4b12      	ldr	r3, [pc, #72]	; (8005724 <prvTaskExitError+0x54>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e2:	d00a      	beq.n	80056fa <prvTaskExitError+0x2a>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	60fb      	str	r3, [r7, #12]
}
 80056f6:	bf00      	nop
 80056f8:	e7fe      	b.n	80056f8 <prvTaskExitError+0x28>
	__asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	60bb      	str	r3, [r7, #8]
}
 800570c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800570e:	bf00      	nop
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0fc      	beq.n	8005710 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005716:	bf00      	nop
 8005718:	bf00      	nop
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	2000002c 	.word	0x2000002c
	...

08005730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005730:	4b07      	ldr	r3, [pc, #28]	; (8005750 <pxCurrentTCBConst2>)
 8005732:	6819      	ldr	r1, [r3, #0]
 8005734:	6808      	ldr	r0, [r1, #0]
 8005736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800573a:	f380 8809 	msr	PSP, r0
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f04f 0000 	mov.w	r0, #0
 8005746:	f380 8811 	msr	BASEPRI, r0
 800574a:	4770      	bx	lr
 800574c:	f3af 8000 	nop.w

08005750 <pxCurrentTCBConst2>:
 8005750:	2000090c 	.word	0x2000090c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005754:	bf00      	nop
 8005756:	bf00      	nop

08005758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005758:	4808      	ldr	r0, [pc, #32]	; (800577c <prvPortStartFirstTask+0x24>)
 800575a:	6800      	ldr	r0, [r0, #0]
 800575c:	6800      	ldr	r0, [r0, #0]
 800575e:	f380 8808 	msr	MSP, r0
 8005762:	f04f 0000 	mov.w	r0, #0
 8005766:	f380 8814 	msr	CONTROL, r0
 800576a:	b662      	cpsie	i
 800576c:	b661      	cpsie	f
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	df00      	svc	0
 8005778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800577a:	bf00      	nop
 800577c:	e000ed08 	.word	0xe000ed08

08005780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005786:	4b46      	ldr	r3, [pc, #280]	; (80058a0 <xPortStartScheduler+0x120>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a46      	ldr	r2, [pc, #280]	; (80058a4 <xPortStartScheduler+0x124>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d10a      	bne.n	80057a6 <xPortStartScheduler+0x26>
	__asm volatile
 8005790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	613b      	str	r3, [r7, #16]
}
 80057a2:	bf00      	nop
 80057a4:	e7fe      	b.n	80057a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80057a6:	4b3e      	ldr	r3, [pc, #248]	; (80058a0 <xPortStartScheduler+0x120>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a3f      	ldr	r2, [pc, #252]	; (80058a8 <xPortStartScheduler+0x128>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d10a      	bne.n	80057c6 <xPortStartScheduler+0x46>
	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	60fb      	str	r3, [r7, #12]
}
 80057c2:	bf00      	nop
 80057c4:	e7fe      	b.n	80057c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057c6:	4b39      	ldr	r3, [pc, #228]	; (80058ac <xPortStartScheduler+0x12c>)
 80057c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	22ff      	movs	r2, #255	; 0xff
 80057d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057e0:	78fb      	ldrb	r3, [r7, #3]
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	4b31      	ldr	r3, [pc, #196]	; (80058b0 <xPortStartScheduler+0x130>)
 80057ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057ee:	4b31      	ldr	r3, [pc, #196]	; (80058b4 <xPortStartScheduler+0x134>)
 80057f0:	2207      	movs	r2, #7
 80057f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057f4:	e009      	b.n	800580a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80057f6:	4b2f      	ldr	r3, [pc, #188]	; (80058b4 <xPortStartScheduler+0x134>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	4a2d      	ldr	r2, [pc, #180]	; (80058b4 <xPortStartScheduler+0x134>)
 80057fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	b2db      	uxtb	r3, r3
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	b2db      	uxtb	r3, r3
 8005808:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800580a:	78fb      	ldrb	r3, [r7, #3]
 800580c:	b2db      	uxtb	r3, r3
 800580e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005812:	2b80      	cmp	r3, #128	; 0x80
 8005814:	d0ef      	beq.n	80057f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005816:	4b27      	ldr	r3, [pc, #156]	; (80058b4 <xPortStartScheduler+0x134>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f1c3 0307 	rsb	r3, r3, #7
 800581e:	2b04      	cmp	r3, #4
 8005820:	d00a      	beq.n	8005838 <xPortStartScheduler+0xb8>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	60bb      	str	r3, [r7, #8]
}
 8005834:	bf00      	nop
 8005836:	e7fe      	b.n	8005836 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005838:	4b1e      	ldr	r3, [pc, #120]	; (80058b4 <xPortStartScheduler+0x134>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	021b      	lsls	r3, r3, #8
 800583e:	4a1d      	ldr	r2, [pc, #116]	; (80058b4 <xPortStartScheduler+0x134>)
 8005840:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005842:	4b1c      	ldr	r3, [pc, #112]	; (80058b4 <xPortStartScheduler+0x134>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800584a:	4a1a      	ldr	r2, [pc, #104]	; (80058b4 <xPortStartScheduler+0x134>)
 800584c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	b2da      	uxtb	r2, r3
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005856:	4b18      	ldr	r3, [pc, #96]	; (80058b8 <xPortStartScheduler+0x138>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a17      	ldr	r2, [pc, #92]	; (80058b8 <xPortStartScheduler+0x138>)
 800585c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005860:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005862:	4b15      	ldr	r3, [pc, #84]	; (80058b8 <xPortStartScheduler+0x138>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a14      	ldr	r2, [pc, #80]	; (80058b8 <xPortStartScheduler+0x138>)
 8005868:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800586c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800586e:	f000 f8dd 	bl	8005a2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005872:	4b12      	ldr	r3, [pc, #72]	; (80058bc <xPortStartScheduler+0x13c>)
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005878:	f000 f8fc 	bl	8005a74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800587c:	4b10      	ldr	r3, [pc, #64]	; (80058c0 <xPortStartScheduler+0x140>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a0f      	ldr	r2, [pc, #60]	; (80058c0 <xPortStartScheduler+0x140>)
 8005882:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005886:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005888:	f7ff ff66 	bl	8005758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800588c:	f7ff f848 	bl	8004920 <vTaskSwitchContext>
	prvTaskExitError();
 8005890:	f7ff ff1e 	bl	80056d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	e000ed00 	.word	0xe000ed00
 80058a4:	410fc271 	.word	0x410fc271
 80058a8:	410fc270 	.word	0x410fc270
 80058ac:	e000e400 	.word	0xe000e400
 80058b0:	20000f38 	.word	0x20000f38
 80058b4:	20000f3c 	.word	0x20000f3c
 80058b8:	e000ed20 	.word	0xe000ed20
 80058bc:	2000002c 	.word	0x2000002c
 80058c0:	e000ef34 	.word	0xe000ef34

080058c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
	__asm volatile
 80058ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ce:	f383 8811 	msr	BASEPRI, r3
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	607b      	str	r3, [r7, #4]
}
 80058dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058de:	4b0f      	ldr	r3, [pc, #60]	; (800591c <vPortEnterCritical+0x58>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3301      	adds	r3, #1
 80058e4:	4a0d      	ldr	r2, [pc, #52]	; (800591c <vPortEnterCritical+0x58>)
 80058e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058e8:	4b0c      	ldr	r3, [pc, #48]	; (800591c <vPortEnterCritical+0x58>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d10f      	bne.n	8005910 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058f0:	4b0b      	ldr	r3, [pc, #44]	; (8005920 <vPortEnterCritical+0x5c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00a      	beq.n	8005910 <vPortEnterCritical+0x4c>
	__asm volatile
 80058fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fe:	f383 8811 	msr	BASEPRI, r3
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	603b      	str	r3, [r7, #0]
}
 800590c:	bf00      	nop
 800590e:	e7fe      	b.n	800590e <vPortEnterCritical+0x4a>
	}
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	2000002c 	.word	0x2000002c
 8005920:	e000ed04 	.word	0xe000ed04

08005924 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800592a:	4b12      	ldr	r3, [pc, #72]	; (8005974 <vPortExitCritical+0x50>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10a      	bne.n	8005948 <vPortExitCritical+0x24>
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	607b      	str	r3, [r7, #4]
}
 8005944:	bf00      	nop
 8005946:	e7fe      	b.n	8005946 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005948:	4b0a      	ldr	r3, [pc, #40]	; (8005974 <vPortExitCritical+0x50>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	3b01      	subs	r3, #1
 800594e:	4a09      	ldr	r2, [pc, #36]	; (8005974 <vPortExitCritical+0x50>)
 8005950:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005952:	4b08      	ldr	r3, [pc, #32]	; (8005974 <vPortExitCritical+0x50>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d105      	bne.n	8005966 <vPortExitCritical+0x42>
 800595a:	2300      	movs	r3, #0
 800595c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	f383 8811 	msr	BASEPRI, r3
}
 8005964:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	2000002c 	.word	0x2000002c
	...

08005980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005980:	f3ef 8009 	mrs	r0, PSP
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	4b15      	ldr	r3, [pc, #84]	; (80059e0 <pxCurrentTCBConst>)
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	f01e 0f10 	tst.w	lr, #16
 8005990:	bf08      	it	eq
 8005992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599a:	6010      	str	r0, [r2, #0]
 800599c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80059a4:	f380 8811 	msr	BASEPRI, r0
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f7fe ffb6 	bl	8004920 <vTaskSwitchContext>
 80059b4:	f04f 0000 	mov.w	r0, #0
 80059b8:	f380 8811 	msr	BASEPRI, r0
 80059bc:	bc09      	pop	{r0, r3}
 80059be:	6819      	ldr	r1, [r3, #0]
 80059c0:	6808      	ldr	r0, [r1, #0]
 80059c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c6:	f01e 0f10 	tst.w	lr, #16
 80059ca:	bf08      	it	eq
 80059cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059d0:	f380 8809 	msr	PSP, r0
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	f3af 8000 	nop.w

080059e0 <pxCurrentTCBConst>:
 80059e0:	2000090c 	.word	0x2000090c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop

080059e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	607b      	str	r3, [r7, #4]
}
 8005a00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a02:	f7fe fed3 	bl	80047ac <xTaskIncrementTick>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a0c:	4b06      	ldr	r3, [pc, #24]	; (8005a28 <xPortSysTickHandler+0x40>)
 8005a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	2300      	movs	r3, #0
 8005a16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	f383 8811 	msr	BASEPRI, r3
}
 8005a1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a20:	bf00      	nop
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	e000ed04 	.word	0xe000ed04

08005a2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a30:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <vPortSetupTimerInterrupt+0x34>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a36:	4b0b      	ldr	r3, [pc, #44]	; (8005a64 <vPortSetupTimerInterrupt+0x38>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a3c:	4b0a      	ldr	r3, [pc, #40]	; (8005a68 <vPortSetupTimerInterrupt+0x3c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a0a      	ldr	r2, [pc, #40]	; (8005a6c <vPortSetupTimerInterrupt+0x40>)
 8005a42:	fba2 2303 	umull	r2, r3, r2, r3
 8005a46:	099b      	lsrs	r3, r3, #6
 8005a48:	4a09      	ldr	r2, [pc, #36]	; (8005a70 <vPortSetupTimerInterrupt+0x44>)
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a4e:	4b04      	ldr	r3, [pc, #16]	; (8005a60 <vPortSetupTimerInterrupt+0x34>)
 8005a50:	2207      	movs	r2, #7
 8005a52:	601a      	str	r2, [r3, #0]
}
 8005a54:	bf00      	nop
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	e000e010 	.word	0xe000e010
 8005a64:	e000e018 	.word	0xe000e018
 8005a68:	20000020 	.word	0x20000020
 8005a6c:	10624dd3 	.word	0x10624dd3
 8005a70:	e000e014 	.word	0xe000e014

08005a74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a84 <vPortEnableVFP+0x10>
 8005a78:	6801      	ldr	r1, [r0, #0]
 8005a7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a7e:	6001      	str	r1, [r0, #0]
 8005a80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a82:	bf00      	nop
 8005a84:	e000ed88 	.word	0xe000ed88

08005a88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005a8e:	f3ef 8305 	mrs	r3, IPSR
 8005a92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2b0f      	cmp	r3, #15
 8005a98:	d914      	bls.n	8005ac4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005a9a:	4a17      	ldr	r2, [pc, #92]	; (8005af8 <vPortValidateInterruptPriority+0x70>)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005aa4:	4b15      	ldr	r3, [pc, #84]	; (8005afc <vPortValidateInterruptPriority+0x74>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	7afa      	ldrb	r2, [r7, #11]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d20a      	bcs.n	8005ac4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	607b      	str	r3, [r7, #4]
}
 8005ac0:	bf00      	nop
 8005ac2:	e7fe      	b.n	8005ac2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ac4:	4b0e      	ldr	r3, [pc, #56]	; (8005b00 <vPortValidateInterruptPriority+0x78>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005acc:	4b0d      	ldr	r3, [pc, #52]	; (8005b04 <vPortValidateInterruptPriority+0x7c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d90a      	bls.n	8005aea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	603b      	str	r3, [r7, #0]
}
 8005ae6:	bf00      	nop
 8005ae8:	e7fe      	b.n	8005ae8 <vPortValidateInterruptPriority+0x60>
	}
 8005aea:	bf00      	nop
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	e000e3f0 	.word	0xe000e3f0
 8005afc:	20000f38 	.word	0x20000f38
 8005b00:	e000ed0c 	.word	0xe000ed0c
 8005b04:	20000f3c 	.word	0x20000f3c

08005b08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08a      	sub	sp, #40	; 0x28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b10:	2300      	movs	r3, #0
 8005b12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b14:	f7fe fd8e 	bl	8004634 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b18:	4b5b      	ldr	r3, [pc, #364]	; (8005c88 <pvPortMalloc+0x180>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b20:	f000 f920 	bl	8005d64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b24:	4b59      	ldr	r3, [pc, #356]	; (8005c8c <pvPortMalloc+0x184>)
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f040 8093 	bne.w	8005c58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d01d      	beq.n	8005b74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005b38:	2208      	movs	r2, #8
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f003 0307 	and.w	r3, r3, #7
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d014      	beq.n	8005b74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f023 0307 	bic.w	r3, r3, #7
 8005b50:	3308      	adds	r3, #8
 8005b52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f003 0307 	and.w	r3, r3, #7
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00a      	beq.n	8005b74 <pvPortMalloc+0x6c>
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	617b      	str	r3, [r7, #20]
}
 8005b70:	bf00      	nop
 8005b72:	e7fe      	b.n	8005b72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d06e      	beq.n	8005c58 <pvPortMalloc+0x150>
 8005b7a:	4b45      	ldr	r3, [pc, #276]	; (8005c90 <pvPortMalloc+0x188>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d869      	bhi.n	8005c58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b84:	4b43      	ldr	r3, [pc, #268]	; (8005c94 <pvPortMalloc+0x18c>)
 8005b86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b88:	4b42      	ldr	r3, [pc, #264]	; (8005c94 <pvPortMalloc+0x18c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b8e:	e004      	b.n	8005b9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d903      	bls.n	8005bac <pvPortMalloc+0xa4>
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1f1      	bne.n	8005b90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005bac:	4b36      	ldr	r3, [pc, #216]	; (8005c88 <pvPortMalloc+0x180>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d050      	beq.n	8005c58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2208      	movs	r2, #8
 8005bbc:	4413      	add	r3, r2
 8005bbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	1ad2      	subs	r2, r2, r3
 8005bd0:	2308      	movs	r3, #8
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d91f      	bls.n	8005c18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4413      	add	r3, r2
 8005bde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	f003 0307 	and.w	r3, r3, #7
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00a      	beq.n	8005c00 <pvPortMalloc+0xf8>
	__asm volatile
 8005bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	613b      	str	r3, [r7, #16]
}
 8005bfc:	bf00      	nop
 8005bfe:	e7fe      	b.n	8005bfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	1ad2      	subs	r2, r2, r3
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c12:	69b8      	ldr	r0, [r7, #24]
 8005c14:	f000 f908 	bl	8005e28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c18:	4b1d      	ldr	r3, [pc, #116]	; (8005c90 <pvPortMalloc+0x188>)
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	4a1b      	ldr	r2, [pc, #108]	; (8005c90 <pvPortMalloc+0x188>)
 8005c24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c26:	4b1a      	ldr	r3, [pc, #104]	; (8005c90 <pvPortMalloc+0x188>)
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	4b1b      	ldr	r3, [pc, #108]	; (8005c98 <pvPortMalloc+0x190>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d203      	bcs.n	8005c3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c32:	4b17      	ldr	r3, [pc, #92]	; (8005c90 <pvPortMalloc+0x188>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a18      	ldr	r2, [pc, #96]	; (8005c98 <pvPortMalloc+0x190>)
 8005c38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	4b13      	ldr	r3, [pc, #76]	; (8005c8c <pvPortMalloc+0x184>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	431a      	orrs	r2, r3
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005c4e:	4b13      	ldr	r3, [pc, #76]	; (8005c9c <pvPortMalloc+0x194>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	3301      	adds	r3, #1
 8005c54:	4a11      	ldr	r2, [pc, #68]	; (8005c9c <pvPortMalloc+0x194>)
 8005c56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c58:	f7fe fcfa 	bl	8004650 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00a      	beq.n	8005c7c <pvPortMalloc+0x174>
	__asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	60fb      	str	r3, [r7, #12]
}
 8005c78:	bf00      	nop
 8005c7a:	e7fe      	b.n	8005c7a <pvPortMalloc+0x172>
	return pvReturn;
 8005c7c:	69fb      	ldr	r3, [r7, #28]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3728      	adds	r7, #40	; 0x28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	20004b48 	.word	0x20004b48
 8005c8c:	20004b5c 	.word	0x20004b5c
 8005c90:	20004b4c 	.word	0x20004b4c
 8005c94:	20004b40 	.word	0x20004b40
 8005c98:	20004b50 	.word	0x20004b50
 8005c9c:	20004b54 	.word	0x20004b54

08005ca0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d04d      	beq.n	8005d4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	425b      	negs	r3, r3
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	4413      	add	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	4b24      	ldr	r3, [pc, #144]	; (8005d58 <vPortFree+0xb8>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10a      	bne.n	8005ce4 <vPortFree+0x44>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	60fb      	str	r3, [r7, #12]
}
 8005ce0:	bf00      	nop
 8005ce2:	e7fe      	b.n	8005ce2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <vPortFree+0x62>
	__asm volatile
 8005cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	60bb      	str	r3, [r7, #8]
}
 8005cfe:	bf00      	nop
 8005d00:	e7fe      	b.n	8005d00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	4b14      	ldr	r3, [pc, #80]	; (8005d58 <vPortFree+0xb8>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d01e      	beq.n	8005d4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d11a      	bne.n	8005d4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	4b0e      	ldr	r3, [pc, #56]	; (8005d58 <vPortFree+0xb8>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	43db      	mvns	r3, r3
 8005d22:	401a      	ands	r2, r3
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d28:	f7fe fc84 	bl	8004634 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	4b0a      	ldr	r3, [pc, #40]	; (8005d5c <vPortFree+0xbc>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4413      	add	r3, r2
 8005d36:	4a09      	ldr	r2, [pc, #36]	; (8005d5c <vPortFree+0xbc>)
 8005d38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d3a:	6938      	ldr	r0, [r7, #16]
 8005d3c:	f000 f874 	bl	8005e28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005d40:	4b07      	ldr	r3, [pc, #28]	; (8005d60 <vPortFree+0xc0>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3301      	adds	r3, #1
 8005d46:	4a06      	ldr	r2, [pc, #24]	; (8005d60 <vPortFree+0xc0>)
 8005d48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005d4a:	f7fe fc81 	bl	8004650 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d4e:	bf00      	nop
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	20004b5c 	.word	0x20004b5c
 8005d5c:	20004b4c 	.word	0x20004b4c
 8005d60:	20004b58 	.word	0x20004b58

08005d64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005d6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d70:	4b27      	ldr	r3, [pc, #156]	; (8005e10 <prvHeapInit+0xac>)
 8005d72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f003 0307 	and.w	r3, r3, #7
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00c      	beq.n	8005d98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3307      	adds	r3, #7
 8005d82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0307 	bic.w	r3, r3, #7
 8005d8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	4a1f      	ldr	r2, [pc, #124]	; (8005e10 <prvHeapInit+0xac>)
 8005d94:	4413      	add	r3, r2
 8005d96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d9c:	4a1d      	ldr	r2, [pc, #116]	; (8005e14 <prvHeapInit+0xb0>)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005da2:	4b1c      	ldr	r3, [pc, #112]	; (8005e14 <prvHeapInit+0xb0>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	4413      	add	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005db0:	2208      	movs	r2, #8
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	1a9b      	subs	r3, r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f023 0307 	bic.w	r3, r3, #7
 8005dbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	4a15      	ldr	r2, [pc, #84]	; (8005e18 <prvHeapInit+0xb4>)
 8005dc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005dc6:	4b14      	ldr	r3, [pc, #80]	; (8005e18 <prvHeapInit+0xb4>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005dce:	4b12      	ldr	r3, [pc, #72]	; (8005e18 <prvHeapInit+0xb4>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	1ad2      	subs	r2, r2, r3
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005de4:	4b0c      	ldr	r3, [pc, #48]	; (8005e18 <prvHeapInit+0xb4>)
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	4a0a      	ldr	r2, [pc, #40]	; (8005e1c <prvHeapInit+0xb8>)
 8005df2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	4a09      	ldr	r2, [pc, #36]	; (8005e20 <prvHeapInit+0xbc>)
 8005dfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005dfc:	4b09      	ldr	r3, [pc, #36]	; (8005e24 <prvHeapInit+0xc0>)
 8005dfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e02:	601a      	str	r2, [r3, #0]
}
 8005e04:	bf00      	nop
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	20000f40 	.word	0x20000f40
 8005e14:	20004b40 	.word	0x20004b40
 8005e18:	20004b48 	.word	0x20004b48
 8005e1c:	20004b50 	.word	0x20004b50
 8005e20:	20004b4c 	.word	0x20004b4c
 8005e24:	20004b5c 	.word	0x20004b5c

08005e28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e30:	4b28      	ldr	r3, [pc, #160]	; (8005ed4 <prvInsertBlockIntoFreeList+0xac>)
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	e002      	b.n	8005e3c <prvInsertBlockIntoFreeList+0x14>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d8f7      	bhi.n	8005e36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	4413      	add	r3, r2
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d108      	bne.n	8005e6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	441a      	add	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	441a      	add	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d118      	bne.n	8005eb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	4b15      	ldr	r3, [pc, #84]	; (8005ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d00d      	beq.n	8005ea6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	441a      	add	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	e008      	b.n	8005eb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ea6:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	e003      	b.n	8005eb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d002      	beq.n	8005ec6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ec6:	bf00      	nop
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	20004b40 	.word	0x20004b40
 8005ed8:	20004b48 	.word	0x20004b48

08005edc <__libc_init_array>:
 8005edc:	b570      	push	{r4, r5, r6, lr}
 8005ede:	4d0d      	ldr	r5, [pc, #52]	; (8005f14 <__libc_init_array+0x38>)
 8005ee0:	4c0d      	ldr	r4, [pc, #52]	; (8005f18 <__libc_init_array+0x3c>)
 8005ee2:	1b64      	subs	r4, r4, r5
 8005ee4:	10a4      	asrs	r4, r4, #2
 8005ee6:	2600      	movs	r6, #0
 8005ee8:	42a6      	cmp	r6, r4
 8005eea:	d109      	bne.n	8005f00 <__libc_init_array+0x24>
 8005eec:	4d0b      	ldr	r5, [pc, #44]	; (8005f1c <__libc_init_array+0x40>)
 8005eee:	4c0c      	ldr	r4, [pc, #48]	; (8005f20 <__libc_init_array+0x44>)
 8005ef0:	f000 f8f2 	bl	80060d8 <_init>
 8005ef4:	1b64      	subs	r4, r4, r5
 8005ef6:	10a4      	asrs	r4, r4, #2
 8005ef8:	2600      	movs	r6, #0
 8005efa:	42a6      	cmp	r6, r4
 8005efc:	d105      	bne.n	8005f0a <__libc_init_array+0x2e>
 8005efe:	bd70      	pop	{r4, r5, r6, pc}
 8005f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f04:	4798      	blx	r3
 8005f06:	3601      	adds	r6, #1
 8005f08:	e7ee      	b.n	8005ee8 <__libc_init_array+0xc>
 8005f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f0e:	4798      	blx	r3
 8005f10:	3601      	adds	r6, #1
 8005f12:	e7f2      	b.n	8005efa <__libc_init_array+0x1e>
 8005f14:	08006218 	.word	0x08006218
 8005f18:	08006218 	.word	0x08006218
 8005f1c:	08006218 	.word	0x08006218
 8005f20:	0800621c 	.word	0x0800621c

08005f24 <__retarget_lock_acquire_recursive>:
 8005f24:	4770      	bx	lr

08005f26 <__retarget_lock_release_recursive>:
 8005f26:	4770      	bx	lr

08005f28 <memcpy>:
 8005f28:	440a      	add	r2, r1
 8005f2a:	4291      	cmp	r1, r2
 8005f2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f30:	d100      	bne.n	8005f34 <memcpy+0xc>
 8005f32:	4770      	bx	lr
 8005f34:	b510      	push	{r4, lr}
 8005f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f3e:	4291      	cmp	r1, r2
 8005f40:	d1f9      	bne.n	8005f36 <memcpy+0xe>
 8005f42:	bd10      	pop	{r4, pc}

08005f44 <memset>:
 8005f44:	4402      	add	r2, r0
 8005f46:	4603      	mov	r3, r0
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d100      	bne.n	8005f4e <memset+0xa>
 8005f4c:	4770      	bx	lr
 8005f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f52:	e7f9      	b.n	8005f48 <memset+0x4>

08005f54 <cleanup_glue>:
 8005f54:	b538      	push	{r3, r4, r5, lr}
 8005f56:	460c      	mov	r4, r1
 8005f58:	6809      	ldr	r1, [r1, #0]
 8005f5a:	4605      	mov	r5, r0
 8005f5c:	b109      	cbz	r1, 8005f62 <cleanup_glue+0xe>
 8005f5e:	f7ff fff9 	bl	8005f54 <cleanup_glue>
 8005f62:	4621      	mov	r1, r4
 8005f64:	4628      	mov	r0, r5
 8005f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f6a:	f000 b869 	b.w	8006040 <_free_r>
	...

08005f70 <_reclaim_reent>:
 8005f70:	4b2c      	ldr	r3, [pc, #176]	; (8006024 <_reclaim_reent+0xb4>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4283      	cmp	r3, r0
 8005f76:	b570      	push	{r4, r5, r6, lr}
 8005f78:	4604      	mov	r4, r0
 8005f7a:	d051      	beq.n	8006020 <_reclaim_reent+0xb0>
 8005f7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005f7e:	b143      	cbz	r3, 8005f92 <_reclaim_reent+0x22>
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d14a      	bne.n	800601c <_reclaim_reent+0xac>
 8005f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f88:	6819      	ldr	r1, [r3, #0]
 8005f8a:	b111      	cbz	r1, 8005f92 <_reclaim_reent+0x22>
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f000 f857 	bl	8006040 <_free_r>
 8005f92:	6961      	ldr	r1, [r4, #20]
 8005f94:	b111      	cbz	r1, 8005f9c <_reclaim_reent+0x2c>
 8005f96:	4620      	mov	r0, r4
 8005f98:	f000 f852 	bl	8006040 <_free_r>
 8005f9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005f9e:	b111      	cbz	r1, 8005fa6 <_reclaim_reent+0x36>
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f000 f84d 	bl	8006040 <_free_r>
 8005fa6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005fa8:	b111      	cbz	r1, 8005fb0 <_reclaim_reent+0x40>
 8005faa:	4620      	mov	r0, r4
 8005fac:	f000 f848 	bl	8006040 <_free_r>
 8005fb0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005fb2:	b111      	cbz	r1, 8005fba <_reclaim_reent+0x4a>
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f000 f843 	bl	8006040 <_free_r>
 8005fba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005fbc:	b111      	cbz	r1, 8005fc4 <_reclaim_reent+0x54>
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	f000 f83e 	bl	8006040 <_free_r>
 8005fc4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005fc6:	b111      	cbz	r1, 8005fce <_reclaim_reent+0x5e>
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f000 f839 	bl	8006040 <_free_r>
 8005fce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005fd0:	b111      	cbz	r1, 8005fd8 <_reclaim_reent+0x68>
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f000 f834 	bl	8006040 <_free_r>
 8005fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fda:	b111      	cbz	r1, 8005fe2 <_reclaim_reent+0x72>
 8005fdc:	4620      	mov	r0, r4
 8005fde:	f000 f82f 	bl	8006040 <_free_r>
 8005fe2:	69a3      	ldr	r3, [r4, #24]
 8005fe4:	b1e3      	cbz	r3, 8006020 <_reclaim_reent+0xb0>
 8005fe6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005fe8:	4620      	mov	r0, r4
 8005fea:	4798      	blx	r3
 8005fec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005fee:	b1b9      	cbz	r1, 8006020 <_reclaim_reent+0xb0>
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005ff6:	f7ff bfad 	b.w	8005f54 <cleanup_glue>
 8005ffa:	5949      	ldr	r1, [r1, r5]
 8005ffc:	b941      	cbnz	r1, 8006010 <_reclaim_reent+0xa0>
 8005ffe:	3504      	adds	r5, #4
 8006000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006002:	2d80      	cmp	r5, #128	; 0x80
 8006004:	68d9      	ldr	r1, [r3, #12]
 8006006:	d1f8      	bne.n	8005ffa <_reclaim_reent+0x8a>
 8006008:	4620      	mov	r0, r4
 800600a:	f000 f819 	bl	8006040 <_free_r>
 800600e:	e7ba      	b.n	8005f86 <_reclaim_reent+0x16>
 8006010:	680e      	ldr	r6, [r1, #0]
 8006012:	4620      	mov	r0, r4
 8006014:	f000 f814 	bl	8006040 <_free_r>
 8006018:	4631      	mov	r1, r6
 800601a:	e7ef      	b.n	8005ffc <_reclaim_reent+0x8c>
 800601c:	2500      	movs	r5, #0
 800601e:	e7ef      	b.n	8006000 <_reclaim_reent+0x90>
 8006020:	bd70      	pop	{r4, r5, r6, pc}
 8006022:	bf00      	nop
 8006024:	20000030 	.word	0x20000030

08006028 <__malloc_lock>:
 8006028:	4801      	ldr	r0, [pc, #4]	; (8006030 <__malloc_lock+0x8>)
 800602a:	f7ff bf7b 	b.w	8005f24 <__retarget_lock_acquire_recursive>
 800602e:	bf00      	nop
 8006030:	20004b60 	.word	0x20004b60

08006034 <__malloc_unlock>:
 8006034:	4801      	ldr	r0, [pc, #4]	; (800603c <__malloc_unlock+0x8>)
 8006036:	f7ff bf76 	b.w	8005f26 <__retarget_lock_release_recursive>
 800603a:	bf00      	nop
 800603c:	20004b60 	.word	0x20004b60

08006040 <_free_r>:
 8006040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006042:	2900      	cmp	r1, #0
 8006044:	d044      	beq.n	80060d0 <_free_r+0x90>
 8006046:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800604a:	9001      	str	r0, [sp, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	f1a1 0404 	sub.w	r4, r1, #4
 8006052:	bfb8      	it	lt
 8006054:	18e4      	addlt	r4, r4, r3
 8006056:	f7ff ffe7 	bl	8006028 <__malloc_lock>
 800605a:	4a1e      	ldr	r2, [pc, #120]	; (80060d4 <_free_r+0x94>)
 800605c:	9801      	ldr	r0, [sp, #4]
 800605e:	6813      	ldr	r3, [r2, #0]
 8006060:	b933      	cbnz	r3, 8006070 <_free_r+0x30>
 8006062:	6063      	str	r3, [r4, #4]
 8006064:	6014      	str	r4, [r2, #0]
 8006066:	b003      	add	sp, #12
 8006068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800606c:	f7ff bfe2 	b.w	8006034 <__malloc_unlock>
 8006070:	42a3      	cmp	r3, r4
 8006072:	d908      	bls.n	8006086 <_free_r+0x46>
 8006074:	6825      	ldr	r5, [r4, #0]
 8006076:	1961      	adds	r1, r4, r5
 8006078:	428b      	cmp	r3, r1
 800607a:	bf01      	itttt	eq
 800607c:	6819      	ldreq	r1, [r3, #0]
 800607e:	685b      	ldreq	r3, [r3, #4]
 8006080:	1949      	addeq	r1, r1, r5
 8006082:	6021      	streq	r1, [r4, #0]
 8006084:	e7ed      	b.n	8006062 <_free_r+0x22>
 8006086:	461a      	mov	r2, r3
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	b10b      	cbz	r3, 8006090 <_free_r+0x50>
 800608c:	42a3      	cmp	r3, r4
 800608e:	d9fa      	bls.n	8006086 <_free_r+0x46>
 8006090:	6811      	ldr	r1, [r2, #0]
 8006092:	1855      	adds	r5, r2, r1
 8006094:	42a5      	cmp	r5, r4
 8006096:	d10b      	bne.n	80060b0 <_free_r+0x70>
 8006098:	6824      	ldr	r4, [r4, #0]
 800609a:	4421      	add	r1, r4
 800609c:	1854      	adds	r4, r2, r1
 800609e:	42a3      	cmp	r3, r4
 80060a0:	6011      	str	r1, [r2, #0]
 80060a2:	d1e0      	bne.n	8006066 <_free_r+0x26>
 80060a4:	681c      	ldr	r4, [r3, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	6053      	str	r3, [r2, #4]
 80060aa:	4421      	add	r1, r4
 80060ac:	6011      	str	r1, [r2, #0]
 80060ae:	e7da      	b.n	8006066 <_free_r+0x26>
 80060b0:	d902      	bls.n	80060b8 <_free_r+0x78>
 80060b2:	230c      	movs	r3, #12
 80060b4:	6003      	str	r3, [r0, #0]
 80060b6:	e7d6      	b.n	8006066 <_free_r+0x26>
 80060b8:	6825      	ldr	r5, [r4, #0]
 80060ba:	1961      	adds	r1, r4, r5
 80060bc:	428b      	cmp	r3, r1
 80060be:	bf04      	itt	eq
 80060c0:	6819      	ldreq	r1, [r3, #0]
 80060c2:	685b      	ldreq	r3, [r3, #4]
 80060c4:	6063      	str	r3, [r4, #4]
 80060c6:	bf04      	itt	eq
 80060c8:	1949      	addeq	r1, r1, r5
 80060ca:	6021      	streq	r1, [r4, #0]
 80060cc:	6054      	str	r4, [r2, #4]
 80060ce:	e7ca      	b.n	8006066 <_free_r+0x26>
 80060d0:	b003      	add	sp, #12
 80060d2:	bd30      	pop	{r4, r5, pc}
 80060d4:	20004b64 	.word	0x20004b64

080060d8 <_init>:
 80060d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060da:	bf00      	nop
 80060dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060de:	bc08      	pop	{r3}
 80060e0:	469e      	mov	lr, r3
 80060e2:	4770      	bx	lr

080060e4 <_fini>:
 80060e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e6:	bf00      	nop
 80060e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ea:	bc08      	pop	{r3}
 80060ec:	469e      	mov	lr, r3
 80060ee:	4770      	bx	lr
